var V4HApi=function(){"use strict";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function t(e,t){return e(t={exports:{}},t.exports),t.exports}var r=t((function(e){e.exports=function(e){return e&&e.__esModule?e:{default:e}}}));e(r);var n=t((function(e){var t=function(e){var t,r=Object.prototype,n=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var i=t&&t.prototype instanceof m?t:m,o=Object.create(i.prototype),a=new S(n||[]);return o._invoke=function(e,t,r){var n=f;return function(i,o){if(n===d)throw new Error("Generator is already running");if(n===p){if("throw"===i)throw o;return T()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=R(a,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var u=h(e,t,r);if("normal"===u.type){if(n=r.done?p:l,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=p,r.method="throw",r.arg=u.arg)}}}(e,r,a),o}function h(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",l="suspendedYield",d="executing",p="completed",g={};function m(){}function v(){}function _(){}var w={};w[o]=function(){return this};var y=Object.getPrototypeOf,b=y&&y(y(L([])));b&&b!==r&&n.call(b,o)&&(w=b);var k=_.prototype=m.prototype=Object.create(w);function E(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function r(i,o,a,s){var u=h(e[i],e,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):t.resolve(f).then((function(e){c.value=e,a(c)}),(function(e){return r("throw",e,a,s)}))}s(u.arg)}var i;this._invoke=function(e,n){function o(){return new t((function(t,i){r(e,n,t,i)}))}return i=i?i.then(o,o):o()}}function R(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,R(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var i=h(n,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,g;var o=i.arg;return o?o.done?(r[e.resultName]=o.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function L(e){if(e){var r=e[o];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function r(){for(;++i<e.length;)if(n.call(e,i))return r.value=e[i],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}return{next:T}}function T(){return{value:t,done:!0}}return v.prototype=k.constructor=_,_.constructor=v,v.displayName=u(_,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,u(e,s,"GeneratorFunction")),e.prototype=Object.create(k),e},e.awrap=function(e){return{__await:e}},E(x.prototype),x.prototype[a]=function(){return this},e.AsyncIterator=x,e.async=function(t,r,n,i,o){void 0===o&&(o=Promise);var a=new x(c(t,r,n,i),o);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},E(k),u(k,s,"Generator"),k[o]=function(){return this},k.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=L,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function i(n,i){return s.type="throw",s.arg=e,r.next=n,i&&(r.method="next",r.arg=t),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),c=n.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),O(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var i=n.arg;O(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:L(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}}));function i(e,t,r,n,i,o,a){try{var s=e[o](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,i)}var o=function(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function s(e){i(a,n,o,s,u,"next",e)}function u(e){i(a,n,o,s,u,"throw",e)}s(void 0)}))}},a=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")};function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var u=function(e,t,r){return t&&s(e.prototype,t),r&&s(e,r),e},c=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},h=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},f=t((function(e){function t(r,n){return e.exports=t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},t(r,n)}e.exports=t})),l=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)},d=t((function(e){function t(r){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=t=function(e){return typeof e}:e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(r)}e.exports=t})),p=function(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?h(e):t},g=t((function(e){function t(r){return e.exports=t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},t(r)}e.exports=t})),m=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}},v=t((function(e){function t(r,n,i){return m()?e.exports=t=Reflect.construct:e.exports=t=function(e,t,r){var n=[null];n.push.apply(n,t);var i=new(Function.bind.apply(e,n));return r&&f(i,r.prototype),i},t.apply(null,arguments)}e.exports=t})),_=t((function(e){function t(r){var n="function"==typeof Map?new Map:void 0;return e.exports=t=function(e){if(null===e||!function(e){return-1!==Function.toString.call(e).indexOf("[native code]")}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return v(e,arguments,g(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),f(t,e)},t(r)}e.exports=t})),w=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(a),i=r(h),o=r(l),s=r(p),u=r(g);var c=function(e){(0,o.default)(r,e);var t=function(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,u.default)(e);if(t){var i=(0,u.default)(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return(0,s.default)(this,r)}}(r);function r(e){var o,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,s=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return(0,n.default)(this,r),(o=t.call(this,e)).message=e,o.code=a,o.internal=s,o.code=a,o.internal=s,Error.captureStackTrace((0,i.default)(o),o.constructor),o}return r}((0,r(_).default)(Error));t.default=c}));e(w);var y=t((function(e){function t(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return t=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==d(e)&&"function"!=typeof e)return{default:e};var r=t();if(r&&r.has(e))return r.get(e);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=i?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(n,o,a):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}}));e(y);var b=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}},k=Object.prototype.toString;function E(e){return"[object Array]"===k.call(e)}function x(e){return void 0===e}function R(e){return null!==e&&"object"==typeof e}function A(e){if("[object Object]"!==k.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function O(e){return"[object Function]"===k.call(e)}function S(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),E(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}var L={isArray:E,isArrayBuffer:function(e){return"[object ArrayBuffer]"===k.call(e)},isBuffer:function(e){return null!==e&&!x(e)&&null!==e.constructor&&!x(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:R,isPlainObject:A,isUndefined:x,isDate:function(e){return"[object Date]"===k.call(e)},isFile:function(e){return"[object File]"===k.call(e)},isBlob:function(e){return"[object Blob]"===k.call(e)},isFunction:O,isStream:function(e){return R(e)&&O(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:S,merge:function e(){var t={};function r(r,n){A(t[n])&&A(r)?t[n]=e(t[n],r):A(r)?t[n]=e({},r):E(r)?t[n]=r.slice():t[n]=r}for(var n=0,i=arguments.length;n<i;n++)S(arguments[n],r);return t},extend:function(e,t,r){return S(t,(function(t,n){e[n]=r&&"function"==typeof t?b(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}};function T(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var C=function(e,t,r){if(!t)return e;var n;if(r)n=r(t);else if(L.isURLSearchParams(t))n=t.toString();else{var i=[];L.forEach(t,(function(e,t){null!=e&&(L.isArray(e)?t+="[]":e=[e],L.forEach(e,(function(e){L.isDate(e)?e=e.toISOString():L.isObject(e)&&(e=JSON.stringify(e)),i.push(T(t)+"="+T(e))})))})),n=i.join("&")}if(n){var o=e.indexOf("#");-1!==o&&(e=e.slice(0,o)),e+=(-1===e.indexOf("?")?"?":"&")+n}return e};function j(){this.handlers=[]}j.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},j.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},j.prototype.forEach=function(e){L.forEach(this.handlers,(function(t){null!==t&&e(t)}))};var P=j,U=function(e,t,r){return L.forEach(r,(function(r){e=r(e,t)})),e},M=function(e){return!(!e||!e.__CANCEL__)},z="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function B(){throw new Error("setTimeout has not been defined")}function N(){throw new Error("clearTimeout has not been defined")}var D=B,I=N;function q(e){if(D===setTimeout)return setTimeout(e,0);if((D===B||!D)&&setTimeout)return D=setTimeout,setTimeout(e,0);try{return D(e,0)}catch(t){try{return D.call(null,e,0)}catch(t){return D.call(this,e,0)}}}"function"==typeof z.setTimeout&&(D=setTimeout),"function"==typeof z.clearTimeout&&(I=clearTimeout);var F,Z=[],H=!1,Y=-1;function W(){H&&F&&(H=!1,F.length?Z=F.concat(Z):Y=-1,Z.length&&G())}function G(){if(!H){var e=q(W);H=!0;for(var t=Z.length;t;){for(F=Z,Z=[];++Y<t;)F&&F[Y].run();Y=-1,t=Z.length}F=null,H=!1,function(e){if(I===clearTimeout)return clearTimeout(e);if((I===N||!I)&&clearTimeout)return I=clearTimeout,clearTimeout(e);try{I(e)}catch(t){try{return I.call(null,e)}catch(t){return I.call(this,e)}}}(e)}}function V(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];Z.push(new X(e,t)),1!==Z.length||H||q(G)}function X(e,t){this.fun=e,this.array=t}function K(){}X.prototype.run=function(){this.fun.apply(null,this.array)};var $=K,J=K,Q=K,ee=K,te=K,re=K,ne=K,ie=z.performance||{},oe=ie.now||ie.mozNow||ie.msNow||ie.oNow||ie.webkitNow||function(){return(new Date).getTime()},ae=new Date,se={nextTick:V,title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:$,addListener:J,once:Q,off:ee,removeListener:te,removeAllListeners:re,emit:ne,binding:function(e){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(e){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(e){var t=.001*oe.call(ie),r=Math.floor(t),n=Math.floor(t%1*1e9);return e&&(r-=e[0],(n-=e[1])<0&&(r--,n+=1e9)),[r,n]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-ae)/1e3}},ue=function(e,t){L.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))},ce=function(e,t,r,n,i){return e.config=t,r&&(e.code=r),e.request=n,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e},he=function(e,t,r,n,i){var o=new Error(e);return ce(o,t,r,n,i)},fe=function(e,t,r){var n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(he("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)},le=L.isStandardBrowserEnv()?{write:function(e,t,r,n,i,o){var a=[];a.push(e+"="+encodeURIComponent(t)),L.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),L.isString(n)&&a.push("path="+n),L.isString(i)&&a.push("domain="+i),!0===o&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}},de=function(e,t){return e&&!function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t},pe=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"],ge=L.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function n(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=n(window.location.href),function(t){var r=L.isString(t)?n(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0},me=[],ve=[],_e="undefined"!=typeof Uint8Array?Uint8Array:Array,we=!1;function ye(){we=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t=0,r=e.length;t<r;++t)me[t]=e[t],ve[e.charCodeAt(t)]=t;ve["-".charCodeAt(0)]=62,ve["_".charCodeAt(0)]=63}function be(e,t,r){for(var n,i,o=[],a=t;a<r;a+=3)n=(e[a]<<16)+(e[a+1]<<8)+e[a+2],o.push(me[(i=n)>>18&63]+me[i>>12&63]+me[i>>6&63]+me[63&i]);return o.join("")}function ke(e){var t;we||ye();for(var r=e.length,n=r%3,i="",o=[],a=16383,s=0,u=r-n;s<u;s+=a)o.push(be(e,s,s+a>u?u:s+a));return 1===n?(t=e[r-1],i+=me[t>>2],i+=me[t<<4&63],i+="=="):2===n&&(t=(e[r-2]<<8)+e[r-1],i+=me[t>>10],i+=me[t>>4&63],i+=me[t<<2&63],i+="="),o.push(i),o.join("")}function Ee(e,t,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,c=u>>1,h=-7,f=r?i-1:0,l=r?-1:1,d=e[t+f];for(f+=l,o=d&(1<<-h)-1,d>>=-h,h+=s;h>0;o=256*o+e[t+f],f+=l,h-=8);for(a=o&(1<<-h)-1,o>>=-h,h+=n;h>0;a=256*a+e[t+f],f+=l,h-=8);if(0===o)o=1-c;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),o-=c}return(d?-1:1)*a*Math.pow(2,o-n)}function xe(e,t,r,n,i,o){var a,s,u,c=8*o-i-1,h=(1<<c)-1,f=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=h):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=h?(s=0,a=h):a+f>=1?(s=(t*u-1)*Math.pow(2,i),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;e[r+d]=255&s,d+=p,s/=256,i-=8);for(a=a<<i|s,c+=i;c>0;e[r+d]=255&a,d+=p,a/=256,c-=8);e[r+d-p]|=128*g}var Re={}.toString,Ae=Array.isArray||function(e){return"[object Array]"==Re.call(e)};function Oe(){return Le.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Se(e,t){if(Oe()<t)throw new RangeError("Invalid typed array length");return Le.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=Le.prototype:(null===e&&(e=new Le(t)),e.length=t),e}function Le(e,t,r){if(!(Le.TYPED_ARRAY_SUPPORT||this instanceof Le))return new Le(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return je(this,e)}return Te(this,e,t,r)}function Te(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");return t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n),Le.TYPED_ARRAY_SUPPORT?(e=t).__proto__=Le.prototype:e=Pe(e,t),e}(e,t,r,n):"string"==typeof t?function(e,t,r){if("string"==typeof r&&""!==r||(r="utf8"),!Le.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|ze(t,r),i=(e=Se(e,n)).write(t,r);return i!==n&&(e=e.slice(0,i)),e}(e,t,r):function(e,t){if(Me(t)){var r=0|Ue(t.length);return 0===(e=Se(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?Se(e,0):Pe(e,t);if("Buffer"===t.type&&Ae(t.data))return Pe(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function Ce(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function je(e,t){if(Ce(t),e=Se(e,t<0?0:0|Ue(t)),!Le.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function Pe(e,t){var r=t.length<0?0:0|Ue(t.length);e=Se(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function Ue(e){if(e>=Oe())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Oe().toString(16)+" bytes");return 0|e}function Me(e){return!(null==e||!e._isBuffer)}function ze(e,t){if(Me(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return ct(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return ht(e).length;default:if(n)return ct(e).length;t=(""+t).toLowerCase(),n=!0}}function Be(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Je(this,t,r);case"utf8":case"utf-8":return Ve(this,t,r);case"ascii":return Ke(this,t,r);case"latin1":case"binary":return $e(this,t,r);case"base64":return Ge(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Qe(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function Ne(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function De(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=Le.from(t,n)),Me(t))return 0===t.length?-1:Ie(e,t,r,n,i);if("number"==typeof t)return t&=255,Le.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):Ie(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function Ie(e,t,r,n,i){var o,a=1,s=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,r/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var h=-1;for(o=r;o<s;o++)if(c(e,o)===c(t,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*a}else-1!==h&&(o-=o-h),h=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var f=!0,l=0;l<u;l++)if(c(e,o+l)!==c(t,l)){f=!1;break}if(f)return o}return-1}function qe(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function Fe(e,t,r,n){return ft(ct(t,e.length-r),e,r,n)}function Ze(e,t,r,n){return ft(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function He(e,t,r,n){return Ze(e,t,r,n)}function Ye(e,t,r,n){return ft(ht(t),e,r,n)}function We(e,t,r,n){return ft(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)n=(r=e.charCodeAt(a))>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function Ge(e,t,r){return 0===t&&r===e.length?ke(e):ke(e.slice(t,r))}function Ve(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,s,u,c=e[i],h=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=r)switch(f){case 1:c<128&&(h=c);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(u=(15&c)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(h=u)}null===h?(h=65533,f=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),i+=f}return function(e){var t=e.length;if(t<=Xe)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=Xe));return r}(n)}Le.TYPED_ARRAY_SUPPORT=void 0===z.TYPED_ARRAY_SUPPORT||z.TYPED_ARRAY_SUPPORT,Le.poolSize=8192,Le._augment=function(e){return e.__proto__=Le.prototype,e},Le.from=function(e,t,r){return Te(null,e,t,r)},Le.TYPED_ARRAY_SUPPORT&&(Le.prototype.__proto__=Uint8Array.prototype,Le.__proto__=Uint8Array),Le.alloc=function(e,t,r){return function(e,t,r,n){return Ce(t),t<=0?Se(e,t):void 0!==r?"string"==typeof n?Se(e,t).fill(r,n):Se(e,t).fill(r):Se(e,t)}(null,e,t,r)},Le.allocUnsafe=function(e){return je(null,e)},Le.allocUnsafeSlow=function(e){return je(null,e)},Le.isBuffer=lt,Le.compare=function(e,t){if(!Me(e)||!Me(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},Le.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Le.concat=function(e,t){if(!Ae(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Le.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Le.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var o=e[r];if(!Me(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},Le.byteLength=ze,Le.prototype._isBuffer=!0,Le.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)Ne(this,t,t+1);return this},Le.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)Ne(this,t,t+3),Ne(this,t+1,t+2);return this},Le.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)Ne(this,t,t+7),Ne(this,t+1,t+6),Ne(this,t+2,t+5),Ne(this,t+3,t+4);return this},Le.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?Ve(this,0,e):Be.apply(this,arguments)},Le.prototype.equals=function(e){if(!Me(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Le.compare(this,e)},Le.prototype.inspect=function(){var e="";return this.length>0&&(e=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(e+=" ... ")),"<Buffer "+e+">"},Le.prototype.compare=function(e,t,r,n,i){if(!Me(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),u=this.slice(n,i),c=e.slice(t,r),h=0;h<s;++h)if(u[h]!==c[h]){o=u[h],a=c[h];break}return o<a?-1:a<o?1:0},Le.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},Le.prototype.indexOf=function(e,t,r){return De(this,e,t,r,!0)},Le.prototype.lastIndexOf=function(e,t,r){return De(this,e,t,r,!1)},Le.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return qe(this,e,t,r);case"utf8":case"utf-8":return Fe(this,e,t,r);case"ascii":return Ze(this,e,t,r);case"latin1":case"binary":return He(this,e,t,r);case"base64":return Ye(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return We(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},Le.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Xe=4096;function Ke(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function $e(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function Je(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=ut(e[o]);return i}function Qe(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function et(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function tt(e,t,r,n,i,o){if(!Me(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function rt(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function nt(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function it(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function ot(e,t,r,n,i){return i||it(e,0,r,4),xe(e,t,r,n,23,4),r+4}function at(e,t,r,n,i){return i||it(e,0,r,8),xe(e,t,r,n,52,8),r+8}Le.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),Le.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=Le.prototype;else{var i=t-e;r=new Le(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},Le.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||et(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},Le.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||et(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},Le.prototype.readUInt8=function(e,t){return t||et(e,1,this.length),this[e]},Le.prototype.readUInt16LE=function(e,t){return t||et(e,2,this.length),this[e]|this[e+1]<<8},Le.prototype.readUInt16BE=function(e,t){return t||et(e,2,this.length),this[e]<<8|this[e+1]},Le.prototype.readUInt32LE=function(e,t){return t||et(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Le.prototype.readUInt32BE=function(e,t){return t||et(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Le.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||et(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},Le.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||et(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},Le.prototype.readInt8=function(e,t){return t||et(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Le.prototype.readInt16LE=function(e,t){t||et(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Le.prototype.readInt16BE=function(e,t){t||et(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Le.prototype.readInt32LE=function(e,t){return t||et(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Le.prototype.readInt32BE=function(e,t){return t||et(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Le.prototype.readFloatLE=function(e,t){return t||et(e,4,this.length),Ee(this,e,!0,23,4)},Le.prototype.readFloatBE=function(e,t){return t||et(e,4,this.length),Ee(this,e,!1,23,4)},Le.prototype.readDoubleLE=function(e,t){return t||et(e,8,this.length),Ee(this,e,!0,52,8)},Le.prototype.readDoubleBE=function(e,t){return t||et(e,8,this.length),Ee(this,e,!1,52,8)},Le.prototype.writeUIntLE=function(e,t,r,n){e=+e,t|=0,r|=0,n||tt(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},Le.prototype.writeUIntBE=function(e,t,r,n){e=+e,t|=0,r|=0,n||tt(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},Le.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,1,255,0),Le.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},Le.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,2,65535,0),Le.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):rt(this,e,t,!0),t+2},Le.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,2,65535,0),Le.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):rt(this,e,t,!1),t+2},Le.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,4,4294967295,0),Le.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):nt(this,e,t,!0),t+4},Le.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,4,4294967295,0),Le.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):nt(this,e,t,!1),t+4},Le.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);tt(this,e,t,r,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},Le.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);tt(this,e,t,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},Le.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,1,127,-128),Le.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},Le.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,2,32767,-32768),Le.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):rt(this,e,t,!0),t+2},Le.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,2,32767,-32768),Le.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):rt(this,e,t,!1),t+2},Le.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,4,2147483647,-2147483648),Le.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):nt(this,e,t,!0),t+4},Le.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||tt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),Le.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):nt(this,e,t,!1),t+4},Le.prototype.writeFloatLE=function(e,t,r){return ot(this,e,t,!0,r)},Le.prototype.writeFloatBE=function(e,t,r){return ot(this,e,t,!1,r)},Le.prototype.writeDoubleLE=function(e,t,r){return at(this,e,t,!0,r)},Le.prototype.writeDoubleBE=function(e,t,r){return at(this,e,t,!1,r)},Le.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!Le.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},Le.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Le.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=Me(e)?e:ct(new Le(e,n).toString()),s=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%s]}return this};var st=/[^+\/0-9A-Za-z-_]/g;function ut(e){return e<16?"0"+e.toString(16):e.toString(16)}function ct(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function ht(e){return function(e){var t,r,n,i,o,a;we||ye();var s=e.length;if(s%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===e[s-2]?2:"="===e[s-1]?1:0,a=new _e(3*s/4-o),n=o>0?s-4:s;var u=0;for(t=0,r=0;t<n;t+=4,r+=3)i=ve[e.charCodeAt(t)]<<18|ve[e.charCodeAt(t+1)]<<12|ve[e.charCodeAt(t+2)]<<6|ve[e.charCodeAt(t+3)],a[u++]=i>>16&255,a[u++]=i>>8&255,a[u++]=255&i;return 2===o?(i=ve[e.charCodeAt(t)]<<2|ve[e.charCodeAt(t+1)]>>4,a[u++]=255&i):1===o&&(i=ve[e.charCodeAt(t)]<<10|ve[e.charCodeAt(t+1)]<<4|ve[e.charCodeAt(t+2)]>>2,a[u++]=i>>8&255,a[u++]=255&i),a}(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(st,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function ft(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function lt(e){return null!=e&&(!!e._isBuffer||dt(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&dt(e.slice(0,0))}(e))}function dt(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var pt,gt,mt=Rt(z.fetch)&&Rt(z.ReadableStream);function vt(e){gt||(gt=new z.XMLHttpRequest).open("GET",z.location.host?"/":"https://example.com");try{return gt.responseType=e,gt.responseType===e}catch(e){return!1}}var _t=void 0!==z.ArrayBuffer,wt=_t&&Rt(z.ArrayBuffer.prototype.slice),yt=_t&&vt("arraybuffer"),bt=!mt&&wt&&vt("ms-stream"),kt=!mt&&_t&&vt("moz-chunked-arraybuffer"),Et=Rt(gt.overrideMimeType),xt=Rt(z.VBArray);function Rt(e){return"function"==typeof e}gt=null;var At="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e},Ot=/%[sdj%]/g;function St(e){if(!Ht(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(Pt(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,i=n.length,o=String(e).replace(Ot,(function(e){if("%%"===e)return"%";if(r>=i)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}})),a=n[r];r<i;a=n[++r])qt(a)||!Gt(a)?o+=" "+a:o+=" "+Pt(a);return o}function Lt(e,t){if(Yt(z.process))return function(){return Lt(e,t).apply(this,arguments)};if(!0===se.noDeprecation)return e;var r=!1;return function(){if(!r){if(se.throwDeprecation)throw new Error(t);se.traceDeprecation?console.trace(t):console.error(t),r=!0}return e.apply(this,arguments)}}var Tt,Ct={};function jt(e){return Yt(Tt)&&(Tt=se.env.NODE_DEBUG||""),e=e.toUpperCase(),Ct[e]||(new RegExp("\\b"+e+"\\b","i").test(Tt)?Ct[e]=function(){var t=St.apply(null,arguments);console.error("%s %d: %s",e,0,t)}:Ct[e]=function(){}),Ct[e]}function Pt(e,t){var r={seen:[],stylize:Mt};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),It(t)?r.showHidden=t:t&&rr(r,t),Yt(r.showHidden)&&(r.showHidden=!1),Yt(r.depth)&&(r.depth=2),Yt(r.colors)&&(r.colors=!1),Yt(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=Ut),zt(r,e,r.depth)}function Ut(e,t){var r=Pt.styles[t];return r?"["+Pt.colors[r][0]+"m"+e+"["+Pt.colors[r][1]+"m":e}function Mt(e,t){return e}function zt(e,t,r){if(e.customInspect&&t&&Kt(t.inspect)&&t.inspect!==Pt&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(r,e);return Ht(n)||(n=zt(e,n,r)),n}var i=function(e,t){if(Yt(t))return e.stylize("undefined","undefined");if(Ht(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return Zt(t)?e.stylize(""+t,"number"):It(t)?e.stylize(""+t,"boolean"):qt(t)?e.stylize("null","null"):void 0}(e,t);if(i)return i;var o=Object.keys(t),a=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(t)),Xt(t)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return Bt(t);if(0===o.length){if(Kt(t)){var s=t.name?": "+t.name:"";return e.stylize("[Function"+s+"]","special")}if(Wt(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(Vt(t))return e.stylize(Date.prototype.toString.call(t),"date");if(Xt(t))return Bt(t)}var u,c="",h=!1,f=["{","}"];return Dt(t)&&(h=!0,f=["[","]"]),Kt(t)&&(c=" [Function"+(t.name?": "+t.name:"")+"]"),Wt(t)&&(c=" "+RegExp.prototype.toString.call(t)),Vt(t)&&(c=" "+Date.prototype.toUTCString.call(t)),Xt(t)&&(c=" "+Bt(t)),0!==o.length||h&&0!=t.length?r<0?Wt(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),u=h?function(e,t,r,n,i){for(var o=[],a=0,s=t.length;a<s;++a)nr(t,String(a))?o.push(Nt(e,t,r,n,String(a),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(Nt(e,t,r,n,i,!0))})),o}(e,t,r,a,o):o.map((function(n){return Nt(e,t,r,a,n,h)})),e.seen.pop(),function(e,t,r){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(u,c,f)):f[0]+c+f[1]}function Bt(e){return"["+Error.prototype.toString.call(e)+"]"}function Nt(e,t,r,n,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(s=e.stylize("[Setter]","special")),nr(n,i)||(a="["+i+"]"),s||(e.seen.indexOf(u.value)<0?(s=qt(r)?zt(e,u.value,null):zt(e,u.value,r-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+s.split("\n").map((function(e){return"   "+e})).join("\n")):s=e.stylize("[Circular]","special")),Yt(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function Dt(e){return Array.isArray(e)}function It(e){return"boolean"==typeof e}function qt(e){return null===e}function Ft(e){return null==e}function Zt(e){return"number"==typeof e}function Ht(e){return"string"==typeof e}function Yt(e){return void 0===e}function Wt(e){return Gt(e)&&"[object RegExp]"===Jt(e)}function Gt(e){return"object"==typeof e&&null!==e}function Vt(e){return Gt(e)&&"[object Date]"===Jt(e)}function Xt(e){return Gt(e)&&("[object Error]"===Jt(e)||e instanceof Error)}function Kt(e){return"function"==typeof e}function $t(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function Jt(e){return Object.prototype.toString.call(e)}function Qt(e){return e<10?"0"+e.toString(10):e.toString(10)}Pt.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},Pt.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var er=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function tr(){var e=new Date,t=[Qt(e.getHours()),Qt(e.getMinutes()),Qt(e.getSeconds())].join(":");return[e.getDate(),er[e.getMonth()],t].join(" ")}function rr(e,t){if(!t||!Gt(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}function nr(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var ir={inherits:At,_extend:rr,log:function(){console.log("%s - %s",tr(),St.apply(null,arguments))},isBuffer:function(e){return Le.isBuffer(e)},isPrimitive:$t,isFunction:Kt,isError:Xt,isDate:Vt,isObject:Gt,isRegExp:Wt,isUndefined:Yt,isSymbol:function(e){return"symbol"==typeof e},isString:Ht,isNumber:Zt,isNullOrUndefined:Ft,isNull:qt,isBoolean:It,isArray:Dt,inspect:Pt,deprecate:Lt,format:St,debuglog:jt};function or(){}function ar(){ar.init.call(this)}function sr(e){return void 0===e._maxListeners?ar.defaultMaxListeners:e._maxListeners}function ur(e,t,r){if(t)e.call(r);else for(var n=e.length,i=mr(e,n),o=0;o<n;++o)i[o].call(r)}function cr(e,t,r,n){if(t)e.call(r,n);else for(var i=e.length,o=mr(e,i),a=0;a<i;++a)o[a].call(r,n)}function hr(e,t,r,n,i){if(t)e.call(r,n,i);else for(var o=e.length,a=mr(e,o),s=0;s<o;++s)a[s].call(r,n,i)}function fr(e,t,r,n,i,o){if(t)e.call(r,n,i,o);else for(var a=e.length,s=mr(e,a),u=0;u<a;++u)s[u].call(r,n,i,o)}function lr(e,t,r,n){if(t)e.apply(r,n);else for(var i=e.length,o=mr(e,i),a=0;a<i;++a)o[a].apply(r,n)}function dr(e,t,r,n){var i,o,a,s;if("function"!=typeof r)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]):(o=e._events=new or,e._eventsCount=0),a){if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),!a.warned&&(i=sr(e))&&i>0&&a.length>i){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,"function"==typeof console.warn?console.warn(s):console.log(s)}}else a=o[t]=r,++e._eventsCount;return e}function pr(e,t,r){var n=!1;function i(){e.removeListener(t,i),n||(n=!0,r.apply(e,arguments))}return i.listener=r,i}function gr(e){var t=this._events;if(t){var r=t[e];if("function"==typeof r)return 1;if(r)return r.length}return 0}function mr(e,t){for(var r=new Array(t);t--;)r[t]=e[t];return r}function vr(){this.head=null,this.tail=null,this.length=0}or.prototype=Object.create(null),ar.EventEmitter=ar,ar.usingDomains=!1,ar.prototype.domain=void 0,ar.prototype._events=void 0,ar.prototype._maxListeners=void 0,ar.defaultMaxListeners=10,ar.init=function(){this.domain=null,ar.usingDomains&&(void 0).active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new or,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},ar.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},ar.prototype.getMaxListeners=function(){return sr(this)},ar.prototype.emit=function(e){var t,r,n,i,o,a,s,u="error"===e;if(a=this._events)u=u&&null==a.error;else if(!u)return!1;if(s=this.domain,u){if(t=arguments[1],!s){if(t instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}return t||(t=new Error('Uncaught, unspecified "error" event')),t.domainEmitter=this,t.domain=s,t.domainThrown=!1,s.emit("error",t),!1}if(!(r=a[e]))return!1;var h="function"==typeof r;switch(n=arguments.length){case 1:ur(r,h,this);break;case 2:cr(r,h,this,arguments[1]);break;case 3:hr(r,h,this,arguments[1],arguments[2]);break;case 4:fr(r,h,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(n-1),o=1;o<n;o++)i[o-1]=arguments[o];lr(r,h,this,i)}return!0},ar.prototype.addListener=function(e,t){return dr(this,e,t,!1)},ar.prototype.on=ar.prototype.addListener,ar.prototype.prependListener=function(e,t){return dr(this,e,t,!0)},ar.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,pr(this,e,t)),this},ar.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,pr(this,e,t)),this},ar.prototype.removeListener=function(e,t){var r,n,i,o,a;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(n=this._events))return this;if(!(r=n[e]))return this;if(r===t||r.listener&&r.listener===t)0==--this._eventsCount?this._events=new or:(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length;o-- >0;)if(r[o]===t||r[o].listener&&r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;if(1===r.length){if(r[0]=void 0,0==--this._eventsCount)return this._events=new or,this;delete n[e]}else!function(e,t){for(var r=t,n=r+1,i=e.length;n<i;r+=1,n+=1)e[r]=e[n];e.pop()}(r,i);n.removeListener&&this.emit("removeListener",e,a||t)}return this},ar.prototype.removeAllListeners=function(e){var t,r;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=new or,this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=new or:delete r[e]),this;if(0===arguments.length){for(var n,i=Object.keys(r),o=0;o<i.length;++o)"removeListener"!==(n=i[o])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=new or,this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(t)do{this.removeListener(e,t[t.length-1])}while(t[0]);return this},ar.prototype.listeners=function(e){var t,r=this._events;return r&&(t=r[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(t):[]},ar.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):gr.call(e,t)},ar.prototype.listenerCount=gr,ar.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]},vr.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},vr.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},vr.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},vr.prototype.clear=function(){this.head=this.tail=null,this.length=0},vr.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},vr.prototype.concat=function(e){if(0===this.length)return Le.alloc(0);if(1===this.length)return this.head.data;for(var t=Le.allocUnsafe(e>>>0),r=this.head,n=0;r;)r.data.copy(t,n),n+=r.data.length,r=r.next;return t};var _r=Le.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function wr(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),function(e){if(e&&!_r(e))throw new Error("Unknown encoding: "+e)}(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=br;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=kr;break;default:return void(this.write=yr)}this.charBuffer=new Le(6),this.charReceived=0,this.charLength=0}function yr(e){return e.toString(this.encoding)}function br(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function kr(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}wr.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";if(e=e.slice(r,e.length),!((n=(t=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(t.length-1))>=55296&&n<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var n,i=e.length;if(this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived),i=(t+=e.toString(this.encoding,0,i)).length-1,(n=t.charCodeAt(i))>=55296&&n<=56319){var o=this.surrogateSize;return this.charLength+=o,this.charReceived+=o,this.charBuffer.copy(this.charBuffer,o,0,o),e.copy(this.charBuffer,0,0,o),t.substring(0,i)}return t},wr.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(t<=2&&r>>4==14){this.charLength=3;break}if(t<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=t},wr.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,n=this.charBuffer,i=this.encoding;t+=n.slice(0,r).toString(i)}return t},Rr.ReadableState=xr;var Er=jt("stream");function xr(e,t){e=e||{},this.objectMode=!!e.objectMode,t instanceof Qr&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.buffer=new vr,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(this.decoder=new wr(e.encoding),this.encoding=e.encoding)}function Rr(e){if(!(this instanceof Rr))return new Rr(e);this._readableState=new xr(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),ar.call(this)}function Ar(e,t,r,n,i){var o=function(e,t){var r=null;return Le.isBuffer(t)||"string"==typeof t||null==t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(t,r);if(o)e.emit("error",o);else if(null===r)t.reading=!1,function(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,Lr(e)}}(e,t);else if(t.objectMode||r&&r.length>0)if(t.ended&&!i){var a=new Error("stream.push() after EOF");e.emit("error",a)}else if(t.endEmitted&&i){var s=new Error("stream.unshift() after end event");e.emit("error",s)}else{var u;!t.decoder||i||n||(r=t.decoder.write(r),u=!t.objectMode&&0===r.length),i||(t.reading=!1),u||(t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,i?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&Lr(e))),function(e,t){t.readingMore||(t.readingMore=!0,V(Cr,e,t))}(e,t)}else i||(t.reading=!1);return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(t)}At(Rr,ar),Rr.prototype.push=function(e,t){var r=this._readableState;return r.objectMode||"string"!=typeof e||(t=t||r.defaultEncoding)!==r.encoding&&(e=Le.from(e,t),t=""),Ar(this,r,e,t,!1)},Rr.prototype.unshift=function(e){return Ar(this,this._readableState,e,"",!0)},Rr.prototype.isPaused=function(){return!1===this._readableState.flowing},Rr.prototype.setEncoding=function(e){return this._readableState.decoder=new wr(e),this._readableState.encoding=e,this};var Or=8388608;function Sr(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=Or?e=Or:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function Lr(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(Er("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?V(Tr,e):Tr(e))}function Tr(e){Er("emit readable"),e.emit("readable"),Ur(e)}function Cr(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(Er("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function jr(e){Er("readable nexttick read 0"),e.read(0)}function Pr(e,t){t.reading||(Er("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),Ur(e),t.flowing&&!t.reading&&e.read(0)}function Ur(e){var t=e._readableState;for(Er("flow",t.flowing);t.flowing&&null!==e.read(););}function Mr(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;return e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;for(e-=i.length;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0==(e-=a)){a===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=Le.allocUnsafe(e),n=t.head,i=1;for(n.data.copy(r),e-=n.data.length;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,a),0==(e-=a)){a===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++i}return t.length-=i,r}(e,t),n}(e,t.buffer,t.decoder),r);var r}function zr(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,V(Br,t,e))}function Br(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function Nr(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}function Dr(){}function Ir(e,t,r){this.chunk=e,this.encoding=t,this.callback=r,this.next=null}function qr(e,t){Object.defineProperty(this,"buffer",{get:Lt((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),e=e||{},this.objectMode=!!e.objectMode,t instanceof Qr&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var i=!1===e.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?V(i,n):i(n),e._writableState.errorEmitted=!0,e.emit("error",n)}(e,r,n,t,i);else{var o=Wr(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||Yr(e,r),n?V(Hr,e,r,o,i):Hr(e,r,o,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new Xr(this)}function Fr(e){if(!(this instanceof Fr||this instanceof Qr))return new Fr(e);this._writableState=new qr(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),ar.call(this)}function Zr(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function Hr(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),Vr(e,t)}function Yr(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var a=0;r;)i[a]=r,r=r.next,a+=1;Zr(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new Xr(t)}else{for(;r;){var s=r.chunk,u=r.encoding,c=r.callback;if(Zr(e,t,!1,t.objectMode?1:s.length,s,u,c),r=r.next,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequestCount=0,t.bufferedRequest=r,t.bufferProcessing=!1}function Wr(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function Gr(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function Vr(e,t){var r=Wr(t);return r&&(0===t.pendingcb?(Gr(e,t),t.finished=!0,e.emit("finish")):Gr(e,t)),r}function Xr(e){var t=this;this.next=null,this.entry=null,this.finish=function(r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}}Rr.prototype.read=function(e){Er("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return Er("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?zr(this):Lr(this),null;if(0===(e=Sr(e,t))&&t.ended)return 0===t.length&&zr(this),null;var n,i=t.needReadable;return Er("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&Er("length less than watermark",i=!0),t.ended||t.reading?Er("reading or ended",i=!1):i&&(Er("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=Sr(r,t))),null===(n=e>0?Mr(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&zr(this)),null!==n&&this.emit("data",n),n},Rr.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Rr.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,Er("pipe count=%d opts=%j",n.pipesCount,t);var i=t&&!1===t.end?c:a;function o(e){Er("onunpipe"),e===r&&c()}function a(){Er("onend"),e.end()}n.endEmitted?V(i):r.once("end",i),e.on("unpipe",o);var s=function(e){return function(){var t=e._readableState;Er("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&e.listeners("data").length&&(t.flowing=!0,Ur(e))}}(r);e.on("drain",s);var u=!1;function c(){Er("cleanup"),e.removeListener("close",d),e.removeListener("finish",p),e.removeListener("drain",s),e.removeListener("error",l),e.removeListener("unpipe",o),r.removeListener("end",a),r.removeListener("end",c),r.removeListener("data",f),u=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||s()}var h=!1;function f(t){Er("ondata"),h=!1,!1!==e.write(t)||h||((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==Nr(n.pipes,e))&&!u&&(Er("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,h=!0),r.pause())}function l(t){Er("onerror",t),g(),e.removeListener("error",l),0===("error",e.listeners("error").length)&&e.emit("error",t)}function d(){e.removeListener("finish",p),g()}function p(){Er("onfinish"),e.removeListener("close",d),g()}function g(){Er("unpipe"),r.unpipe(e)}return r.on("data",f),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",l),e.once("close",d),e.once("finish",p),e.emit("pipe",r),n.flowing||(Er("pipe resume"),r.resume()),e},Rr.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this)),this;if(!e){var r=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<n;i++)r[i].emit("unpipe",this);return this}var o=Nr(t.pipes,e);return-1===o||(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this)),this},Rr.prototype.on=function(e,t){var r=ar.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&Lr(this):V(jr,this))}return r},Rr.prototype.addListener=Rr.prototype.on,Rr.prototype.resume=function(){var e=this._readableState;return e.flowing||(Er("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,V(Pr,e,t))}(this,e)),this},Rr.prototype.pause=function(){return Er("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(Er("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Rr.prototype.wrap=function(e){var t=this._readableState,r=!1,n=this;for(var i in e.on("end",(function(){if(Er("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)})),e.on("data",(function(i){Er("wrapped data"),t.decoder&&(i=t.decoder.write(i)),t.objectMode&&null==i||(t.objectMode||i&&i.length)&&(n.push(i)||(r=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));return function(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r])}(["error","close","destroy","pause","resume"],(function(t){e.on(t,n.emit.bind(n,t))})),n._read=function(t){Er("wrapped _read",t),r&&(r=!1,e.resume())},n},Rr._fromList=Mr,Fr.WritableState=qr,At(Fr,ar),qr.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},Fr.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},Fr.prototype.write=function(e,t,r){var n=this._writableState,i=!1;return"function"==typeof t&&(r=t,t=null),Le.isBuffer(e)?t="buffer":t||(t=n.defaultEncoding),"function"!=typeof r&&(r=Dr),n.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),V(t,r)}(this,r):function(e,t,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):Le.isBuffer(r)||"string"==typeof r||void 0===r||t.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),V(n,o),i=!1),i}(this,n,e,r)&&(n.pendingcb++,i=function(e,t,r,n,i){r=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=Le.from(t,r)),t}(t,r,n),Le.isBuffer(r)&&(n="buffer");var o=t.objectMode?1:r.length;t.length+=o;var a=t.length<t.highWaterMark;if(a||(t.needDrain=!0),t.writing||t.corked){var s=t.lastBufferedRequest;t.lastBufferedRequest=new Ir(r,n,i),s?s.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else Zr(e,t,!1,o,r,n,i);return a}(this,n,e,t,r)),i},Fr.prototype.cork=function(){this._writableState.corked++},Fr.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||Yr(this,e))},Fr.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Fr.prototype._write=function(e,t,r){r(new Error("not implemented"))},Fr.prototype._writev=null,Fr.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,Vr(e,t),r&&(t.finished?V(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r)},At(Qr,Rr);for(var Kr=Object.keys(Fr.prototype),$r=0;$r<Kr.length;$r++){var Jr=Kr[$r];Qr.prototype[Jr]||(Qr.prototype[Jr]=Fr.prototype[Jr])}function Qr(e){if(!(this instanceof Qr))return new Qr(e);Rr.call(this,e),Fr.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",en)}function en(){this.allowHalfOpen||this._writableState.ended||V(tn,this)}function tn(e){e.end()}function rn(e){this.afterTransform=function(t,r){return function(e,t,r){var n=e._transformState;n.transforming=!1;var i=n.writecb;if(!i)return e.emit("error",new Error("no writecb in Transform class"));n.writechunk=null,n.writecb=null,null!=r&&e.push(r),i(t);var o=e._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&e._read(o.highWaterMark)}(e,t,r)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function nn(e){if(!(this instanceof nn))return new nn(e);Qr.call(this,e),this._transformState=new rn(this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.once("prefinish",(function(){"function"==typeof this._flush?this._flush((function(e){on(t,e)})):on(t)}))}function on(e,t){if(t)return e.emit("error",t);var r=e._writableState,n=e._transformState;if(r.length)throw new Error("Calling transform done when ws.length != 0");if(n.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}function an(e){if(!(this instanceof an))return new an(e);nn.call(this,e)}function sn(){ar.call(this)}At(nn,Qr),nn.prototype.push=function(e,t){return this._transformState.needTransform=!1,Qr.prototype.push.call(this,e,t)},nn.prototype._transform=function(e,t,r){throw new Error("Not implemented")},nn.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},nn.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},At(an,nn),an.prototype._transform=function(e,t,r){r(null,e)},At(sn,ar),sn.Readable=Rr,sn.Writable=Fr,sn.Duplex=Qr,sn.Transform=nn,sn.PassThrough=an,sn.Stream=sn,sn.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function i(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",i),e._isStdio||t&&!1===t.end||(r.on("end",a),r.on("close",s));var o=!1;function a(){o||(o=!0,e.end())}function s(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function u(e){if(c(),0===ar.listenerCount(this,"error"))throw e}function c(){r.removeListener("data",n),e.removeListener("drain",i),r.removeListener("end",a),r.removeListener("close",s),r.removeListener("error",u),e.removeListener("error",u),r.removeListener("end",c),r.removeListener("close",c),e.removeListener("close",c)}return r.on("error",u),e.on("error",u),r.on("end",c),r.on("close",c),e.on("close",c),e.emit("pipe",r),e};function un(e,t,r){var n,i=this;if(Rr.call(i),i._mode=r,i.headers={},i.rawHeaders=[],i.trailers={},i.rawTrailers=[],i.on("end",(function(){se.nextTick((function(){i.emit("close")}))})),"fetch"===r){i._fetchResponse=t,i.url=t.url,i.statusCode=t.status,i.statusMessage=t.statusText;for(var o,a,s=t.headers[Symbol.iterator]();o=(a=s.next()).value,!a.done;)i.headers[o[0].toLowerCase()]=o[1],i.rawHeaders.push(o[0],o[1]);var u=t.body.getReader();(n=function(){u.read().then((function(e){i._destroyed||(e.done?i.push(null):(i.push(new Le(e.value)),n()))}))})()}else if(i._xhr=e,i._pos=0,i.url=e.responseURL,i.statusCode=e.status,i.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach((function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var r=t[1].toLowerCase();"set-cookie"===r?(void 0===i.headers[r]&&(i.headers[r]=[]),i.headers[r].push(t[2])):void 0!==i.headers[r]?i.headers[r]+=", "+t[2]:i.headers[r]=t[2],i.rawHeaders.push(t[1],t[2])}})),i._charset="x-user-defined",!Et){var c=i.rawHeaders["mime-type"];if(c){var h=c.match(/;\s*charset=([^;])(;|$)/);h&&(i._charset=h[1].toLowerCase())}i._charset||(i._charset="utf-8")}}function cn(e){var t,r=this;Fr.call(r),r._opts=e,r._body=[],r._headers={},e.auth&&r.setHeader("Authorization","Basic "+new Le(e.auth).toString("base64")),Object.keys(e.headers).forEach((function(t){r.setHeader(t,e.headers[t])}));var n=!0;if("disable-fetch"===e.mode)n=!1,t=!0;else if("prefer-streaming"===e.mode)t=!1;else if("allow-wrong-content-type"===e.mode)t=!Et;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");t=!0}r._mode=function(e,t){return mt&&t?"fetch":kt?"moz-chunked-arraybuffer":bt?"ms-stream":yt&&e?"arraybuffer":xt&&e?"text:vbarray":"text"}(t,n),r.on("finish",(function(){r._onFinish()}))}At(un,Rr),un.prototype._read=function(){},un.prototype._onXHRProgress=function(){var e=this,t=e._xhr,r=null;switch(e._mode){case"text:vbarray":if(4!==t.readyState)break;try{r=new z.VBArray(t.responseBody).toArray()}catch(e){}if(null!==r){e.push(new Le(r));break}case"text":try{r=t.responseText}catch(t){e._mode="text:vbarray";break}if(r.length>e._pos){var n=r.substr(e._pos);if("x-user-defined"===e._charset){for(var i=new Le(n.length),o=0;o<n.length;o++)i[o]=255&n.charCodeAt(o);e.push(i)}else e.push(n,e._charset);e._pos=r.length}break;case"arraybuffer":if(4!==t.readyState||!t.response)break;r=t.response,e.push(new Le(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=t.response,3!==t.readyState||!r)break;e.push(new Le(new Uint8Array(r)));break;case"ms-stream":if(r=t.response,3!==t.readyState)break;var a=new z.MSStreamReader;a.onprogress=function(){a.result.byteLength>e._pos&&(e.push(new Le(new Uint8Array(a.result.slice(e._pos)))),e._pos=a.result.byteLength)},a.onload=function(){e.push(null)},a.readAsArrayBuffer(r)}4===e._xhr.readyState&&"ms-stream"!==e._mode&&e.push(null)},At(cn,Fr);var hn=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];cn.prototype.setHeader=function(e,t){var r=e.toLowerCase();-1===hn.indexOf(r)&&(this._headers[r]={name:e,value:t})},cn.prototype.getHeader=function(e){return this._headers[e.toLowerCase()].value},cn.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},cn.prototype._onFinish=function(){var e=this;if(!e._destroyed){var t,r=e._opts,n=e._headers;if("POST"!==r.method&&"PUT"!==r.method&&"PATCH"!==r.method||(t=function(){if(void 0!==pt)return pt;try{new z.Blob([new ArrayBuffer(1)]),pt=!0}catch(e){pt=!1}return pt}()?new z.Blob(e._body.map((function(e){return function(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(lt(e)){for(var t=new Uint8Array(e.length),r=e.length,n=0;n<r;n++)t[n]=e[n];return t.buffer}throw new Error("Argument must be a Buffer")}(e)})),{type:(n["content-type"]||{}).value||""}):Le.concat(e._body).toString()),"fetch"===e._mode){var i=Object.keys(n).map((function(e){return[n[e].name,n[e].value]}));z.fetch(e._opts.url,{method:e._opts.method,headers:i,body:t,mode:"cors",credentials:r.withCredentials?"include":"same-origin"}).then((function(t){e._fetchResponse=t,e._connect()}),(function(t){e.emit("error",t)}))}else{var o=e._xhr=new z.XMLHttpRequest;try{o.open(e._opts.method,e._opts.url,!0)}catch(t){return void se.nextTick((function(){e.emit("error",t)}))}"responseType"in o&&(o.responseType=e._mode.split(":")[0]),"withCredentials"in o&&(o.withCredentials=!!r.withCredentials),"text"===e._mode&&"overrideMimeType"in o&&o.overrideMimeType("text/plain; charset=x-user-defined"),Object.keys(n).forEach((function(e){o.setRequestHeader(n[e].name,n[e].value)})),e._response=null,o.onreadystatechange=function(){switch(o.readyState){case 3:case 4:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(o.onprogress=function(){e._onXHRProgress()}),o.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{o.send(t)}catch(t){return void se.nextTick((function(){e.emit("error",t)}))}}}},cn.prototype._onXHRProgress=function(){var e=this;(function(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}})(e._xhr)&&!e._destroyed&&(e._response||e._connect(),e._response._onXHRProgress())},cn.prototype._connect=function(){var e=this;e._destroyed||(e._response=new un(e._xhr,e._fetchResponse,e._mode),e.emit("response",e._response))},cn.prototype._write=function(e,t,r){this._body.push(e),r()},cn.prototype.abort=cn.prototype.destroy=function(){var e=this;e._destroyed=!0,e._response&&(e._response._destroyed=!0),e._xhr&&e._xhr.abort()},cn.prototype.end=function(e,t,r){"function"==typeof e&&(r=e,e=void 0),Fr.prototype.end.call(this,e,t,r)},cn.prototype.flushHeaders=function(){},cn.prototype.setTimeout=function(){},cn.prototype.setNoDelay=function(){},cn.prototype.setSocketKeepAlive=function(){};
/*! https://mths.be/punycode v1.4.1 by @mathias */
var fn=2147483647,ln=/[^\x20-\x7E]/,dn=/[\x2E\u3002\uFF0E\uFF61]/g,pn={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},gn=Math.floor,mn=String.fromCharCode;function vn(e){throw new RangeError(pn[e])}function _n(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function wn(e,t,r){var n=0;for(e=r?gn(e/700):e>>1,e+=gn(e/t);e>455;n+=36)e=gn(e/35);return gn(n+36*e/(e+38))}function yn(e){return function(e,t){var r=e.split("@"),n="";r.length>1&&(n=r[0]+"@",e=r[1]);var i=function(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}((e=e.replace(dn,".")).split("."),(function(e){return ln.test(e)?"xn--"+function(e){var t,r,n,i,o,a,s,u,c,h,f,l,d,p,g,m=[];for(l=(e=function(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}(e)).length,t=128,r=0,o=72,a=0;a<l;++a)(f=e[a])<128&&m.push(mn(f));for(n=i=m.length,i&&m.push("-");n<l;){for(s=fn,a=0;a<l;++a)(f=e[a])>=t&&f<s&&(s=f);for(s-t>gn((fn-r)/(d=n+1))&&vn("overflow"),r+=(s-t)*d,t=s,a=0;a<l;++a)if((f=e[a])<t&&++r>fn&&vn("overflow"),f==t){for(u=r,c=36;!(u<(h=c<=o?1:c>=o+26?26:c-o));c+=36)g=u-h,p=36-h,m.push(mn(_n(h+g%p,0))),u=gn(g/p);m.push(mn(_n(u,0))),o=wn(r,d,n==i),r=0,++n}++r,++t}return m.join("")}(e):e})).join(".");return n+i}(e)}function bn(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var kn=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function En(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}}function xn(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var Rn=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t};function An(e,t,r,n){t=t||"&",r=r||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(t);var a=1e3;n&&"number"==typeof n.maxKeys&&(a=n.maxKeys);var s=e.length;a>0&&s>a&&(s=a);for(var u=0;u<s;++u){var c,h,f,l,d=e[u].replace(o,"%20"),p=d.indexOf(r);p>=0?(c=d.substr(0,p),h=d.substr(p+1)):(c=d,h=""),f=decodeURIComponent(c),l=decodeURIComponent(h),bn(i,f)?kn(i[f])?i[f].push(l):i[f]=[i[f],l]:i[f]=l}return i}var On={parse:qn,resolve:function(e,t){return qn(e,!1,!0).resolve(t)},resolveObject:function(e,t){return e?qn(e,!1,!0).resolveObject(t):t},format:function(e){return Ht(e)&&(e=Fn({},e)),Zn(e)},Url:Sn};function Sn(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var Ln=/^([a-z0-9.+-]+:)/i,Tn=/:[0-9]*$/,Cn=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,jn=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),Pn=["'"].concat(jn),Un=["%","/","?",";","#"].concat(Pn),Mn=["/","?","#"],zn=/^[+a-z0-9A-Z_-]{0,63}$/,Bn=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,Nn={javascript:!0,"javascript:":!0},Dn={javascript:!0,"javascript:":!0},In={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function qn(e,t,r){if(e&&Gt(e)&&e instanceof Sn)return e;var n=new Sn;return n.parse(e,t,r),n}function Fn(e,t,r,n){if(!Ht(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var i=t.indexOf("?"),o=-1!==i&&i<t.indexOf("#")?"?":"#",a=t.split(o);a[0]=a[0].replace(/\\/g,"/");var s=t=a.join(o);if(s=s.trim(),!n&&1===t.split("#").length){var u=Cn.exec(s);if(u)return e.path=s,e.href=s,e.pathname=u[1],u[2]?(e.search=u[2],e.query=r?An(e.search.substr(1)):e.search.substr(1)):r&&(e.search="",e.query={}),e}var c,h,f,l,d=Ln.exec(s);if(d){var p=(d=d[0]).toLowerCase();e.protocol=p,s=s.substr(d.length)}if(n||d||s.match(/^\/\/[^@\/]+@[^@\/]+/)){var g="//"===s.substr(0,2);!g||d&&Dn[d]||(s=s.substr(2),e.slashes=!0)}if(!Dn[d]&&(g||d&&!In[d])){var m,v,_=-1;for(c=0;c<Mn.length;c++)-1!==(h=s.indexOf(Mn[c]))&&(-1===_||h<_)&&(_=h);for(-1!==(v=-1===_?s.lastIndexOf("@"):s.lastIndexOf("@",_))&&(m=s.slice(0,v),s=s.slice(v+1),e.auth=decodeURIComponent(m)),_=-1,c=0;c<Un.length;c++)-1!==(h=s.indexOf(Un[c]))&&(-1===_||h<_)&&(_=h);-1===_&&(_=s.length),e.host=s.slice(0,_),s=s.slice(_),Hn(e),e.hostname=e.hostname||"";var w="["===e.hostname[0]&&"]"===e.hostname[e.hostname.length-1];if(!w){var y=e.hostname.split(/\./);for(c=0,f=y.length;c<f;c++){var b=y[c];if(b&&!b.match(zn)){for(var k="",E=0,x=b.length;E<x;E++)b.charCodeAt(E)>127?k+="x":k+=b[E];if(!k.match(zn)){var R=y.slice(0,c),A=y.slice(c+1),O=b.match(Bn);O&&(R.push(O[1]),A.unshift(O[2])),A.length&&(s="/"+A.join(".")+s),e.hostname=R.join(".");break}}}}e.hostname.length>255?e.hostname="":e.hostname=e.hostname.toLowerCase(),w||(e.hostname=yn(e.hostname)),l=e.port?":"+e.port:"";var S=e.hostname||"";e.host=S+l,e.href+=e.host,w&&(e.hostname=e.hostname.substr(1,e.hostname.length-2),"/"!==s[0]&&(s="/"+s))}if(!Nn[p])for(c=0,f=Pn.length;c<f;c++){var L=Pn[c];if(-1!==s.indexOf(L)){var T=encodeURIComponent(L);T===L&&(T=escape(L)),s=s.split(L).join(T)}}var C=s.indexOf("#");-1!==C&&(e.hash=s.substr(C),s=s.slice(0,C));var j=s.indexOf("?");if(-1!==j?(e.search=s.substr(j),e.query=s.substr(j+1),r&&(e.query=An(e.query)),s=s.slice(0,j)):r&&(e.search="",e.query={}),s&&(e.pathname=s),In[p]&&e.hostname&&!e.pathname&&(e.pathname="/"),e.pathname||e.search){l=e.pathname||"";var P=e.search||"";e.path=l+P}return e.href=Zn(e),e}function Zn(e){var t=e.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var r=e.protocol||"",n=e.pathname||"",i=e.hash||"",o=!1,a="";e.host?o=t+e.host:e.hostname&&(o=t+(-1===e.hostname.indexOf(":")?e.hostname:"["+this.hostname+"]"),e.port&&(o+=":"+e.port)),e.query&&Gt(e.query)&&Object.keys(e.query).length&&(a=function(e,t,r,n){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?xn(Rn(e),(function(n){var i=encodeURIComponent(En(n))+r;return kn(e[n])?xn(e[n],(function(e){return i+encodeURIComponent(En(e))})).join(t):i+encodeURIComponent(En(e[n]))})).join(t):""}(e.query));var s=e.search||a&&"?"+a||"";return r&&":"!==r.substr(-1)&&(r+=":"),e.slashes||(!r||In[r])&&!1!==o?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),i&&"#"!==i.charAt(0)&&(i="#"+i),s&&"?"!==s.charAt(0)&&(s="?"+s),r+o+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+i}function Hn(e){var t=e.host,r=Tn.exec(t);r&&(":"!==(r=r[0])&&(e.port=r.substr(1)),t=t.substr(0,t.length-r.length)),t&&(e.hostname=t)}function Yn(e,t){"string"==typeof e&&(e=qn(e));var r=-1===z.location.protocol.search(/^https?:$/)?"http:":"",n=e.protocol||r,i=e.hostname||e.host,o=e.port,a=e.path||"/";i&&-1!==i.indexOf(":")&&(i="["+i+"]"),e.url=(i?n+"//"+i:"")+(o?":"+o:"")+a,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var s=new cn(e);return t&&s.on("response",t),s}function Wn(){}Sn.prototype.parse=function(e,t,r){return Fn(this,e,t,r)},Sn.prototype.format=function(){return Zn(this)},Sn.prototype.resolve=function(e){return this.resolveObject(qn(e,!1,!0)).format()},Sn.prototype.resolveObject=function(e){if(Ht(e)){var t=new Sn;t.parse(e,!1,!0),e=t}for(var r,n=new Sn,i=Object.keys(this),o=0;o<i.length;o++){var a=i[o];n[a]=this[a]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var s=Object.keys(e),u=0;u<s.length;u++){var c=s[u];"protocol"!==c&&(n[c]=e[c])}return In[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!In[e.protocol]){for(var h=Object.keys(e),f=0;f<h.length;f++){var l=h[f];n[l]=e[l]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||Dn[e.protocol])n.pathname=e.pathname;else{for(r=(e.pathname||"").split("/");r.length&&!(e.host=r.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==r[0]&&r.unshift(""),r.length<2&&r.unshift(""),n.pathname=r.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var d=n.pathname||"",p=n.search||"";n.path=d+p}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var g,m=n.pathname&&"/"===n.pathname.charAt(0),v=e.host||e.pathname&&"/"===e.pathname.charAt(0),_=v||m||n.host&&e.pathname,w=_,y=n.pathname&&n.pathname.split("/")||[],b=n.protocol&&!In[n.protocol];if(r=e.pathname&&e.pathname.split("/")||[],b&&(n.hostname="",n.port=null,n.host&&(""===y[0]?y[0]=n.host:y.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===r[0]?r[0]=e.host:r.unshift(e.host)),e.host=null),_=_&&(""===r[0]||""===y[0])),v)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,y=r;else if(r.length)y||(y=[]),y.pop(),y=y.concat(r),n.search=e.search,n.query=e.query;else if(!Ft(e.search))return b&&(n.hostname=n.host=y.shift(),(g=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=g.shift(),n.host=n.hostname=g.shift())),n.search=e.search,n.query=e.query,qt(n.pathname)&&qt(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!y.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var k=y.slice(-1)[0],E=(n.host||e.host||y.length>1)&&("."===k||".."===k)||""===k,x=0,R=y.length;R>=0;R--)"."===(k=y[R])?y.splice(R,1):".."===k?(y.splice(R,1),x++):x&&(y.splice(R,1),x--);if(!_&&!w)for(;x--;x)y.unshift("..");!_||""===y[0]||y[0]&&"/"===y[0].charAt(0)||y.unshift(""),E&&"/"!==y.join("/").substr(-1)&&y.push("");var A=""===y[0]||y[0]&&"/"===y[0].charAt(0);return b&&(n.hostname=n.host=A?"":y.length?y.shift():"",(g=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=g.shift(),n.host=n.hostname=g.shift())),(_=_||n.host&&y.length)&&!A&&y.unshift(""),y.length?n.pathname=y.join("/"):(n.pathname=null,n.path=null),qt(n.pathname)&&qt(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},Sn.prototype.parseHost=function(){return Hn(this)},Wn.defaultMaxSockets=4;var Gn={request:Yn,get:function(e,t){var r=Yn(e,t);return r.end(),r},Agent:Wn,METHODS:["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"],STATUS_CODES:{100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}};function Vn(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}var Xn,Kn=Object.prototype.hasOwnProperty,$n=Object.keys||function(e){var t=[];for(var r in e)Kn.call(e,r)&&t.push(r);return t},Jn=Array.prototype.slice;function Qn(){return void 0!==Xn?Xn:Xn="foo"===function(){}.name}function ei(e){return Object.prototype.toString.call(e)}function ti(e){return!lt(e)&&"function"==typeof z.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer)))}function ri(e,t){e||ui(e,!0,t,"==",ci)}var ni=/\s*function\s+([^\(\s]*)\s*/;function ii(e){if(Kt(e)){if(Qn())return e.name;var t=e.toString().match(ni);return t&&t[1]}}function oi(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=function(e){return ai(si(e.actual),128)+" "+e.operator+" "+ai(si(e.expected),128)}(this),this.generatedMessage=!0);var t=e.stackStartFunction||ui;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=ii(t),o=n.indexOf("\n"+i);if(o>=0){var a=n.indexOf("\n",o+1);n=n.substring(a+1)}this.stack=n}}}function ai(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function si(e){if(Qn()||!Kt(e))return Pt(e);var t=ii(e);return"[Function"+(t?": "+t:"")+"]"}function ui(e,t,r,n,i){throw new oi({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function ci(e,t){e||ui(e,!0,t,"==",ci)}function hi(e,t,r,n){if(e===t)return!0;if(lt(e)&&lt(t))return 0===Vn(e,t);if(Vt(e)&&Vt(t))return e.getTime()===t.getTime();if(Wt(e)&&Wt(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(ti(e)&&ti(t)&&ei(e)===ei(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===Vn(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(lt(e)!==lt(t))return!1;var i=(n=n||{actual:[],expected:[]}).actual.indexOf(e);return-1!==i&&i===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),function(e,t,r,n){if(null==e||null==t)return!1;if($t(e)||$t(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=fi(e),o=fi(t);if(i&&!o||!i&&o)return!1;if(i)return hi(e=Jn.call(e),t=Jn.call(t),r);var a,s,u=$n(e),c=$n(t);if(u.length!==c.length)return!1;for(u.sort(),c.sort(),s=u.length-1;s>=0;s--)if(u[s]!==c[s])return!1;for(s=u.length-1;s>=0;s--)if(!hi(e[a=u[s]],t[a],r,n))return!1;return!0}(e,t,r,n))}return r?e===t:e==t}function fi(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function li(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function di(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&ui(i,r,"Missing expected exception"+n);var o="string"==typeof n,a=!e&&i&&!r;if((!e&&Xt(i)&&o&&li(i,r)||a)&&ui(i,r,"Got unwanted exception"+n),e&&i&&r&&!li(i,r)||!e&&i)throw i}ri.AssertionError=oi,At(oi,Error),ri.fail=ui,ri.ok=ci,ri.equal=function e(t,r,n){t!=r&&ui(t,r,n,"==",e)},ri.notEqual=function e(t,r,n){t==r&&ui(t,r,n,"!=",e)},ri.deepEqual=function e(t,r,n){hi(t,r,!1)||ui(t,r,n,"deepEqual",e)},ri.deepStrictEqual=function e(t,r,n){hi(t,r,!0)||ui(t,r,n,"deepStrictEqual",e)},ri.notDeepEqual=function e(t,r,n){hi(t,r,!1)&&ui(t,r,n,"notDeepEqual",e)},ri.notDeepStrictEqual=function e(t,r,n){hi(t,r,!0)&&ui(t,r,n,"notDeepStrictEqual",e)},ri.strictEqual=function e(t,r,n){t!==r&&ui(t,r,n,"===",e)},ri.notStrictEqual=function e(t,r,n){t===r&&ui(t,r,n,"!==",e)},ri.throws=function(e,t,r){di(!0,e,t,r)},ri.doesNotThrow=function(e,t,r){di(!1,e,t,r)},ri.ifError=function(e){if(e)throw e};var pi=1e3,gi=6e4,mi=60*gi,vi=24*mi,_i=function(e,t){t=t||{};var r=typeof e;if("string"===r&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*r;case"days":case"day":case"d":return r*vi;case"hours":case"hour":case"hrs":case"hr":case"h":return r*mi;case"minutes":case"minute":case"mins":case"min":case"m":return r*gi;case"seconds":case"second":case"secs":case"sec":case"s":return r*pi;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}(e);if("number"===r&&!1===isNaN(e))return t.long?function(e){return wi(e,vi,"day")||wi(e,mi,"hour")||wi(e,gi,"minute")||wi(e,pi,"second")||e+" ms"}(e):function(e){return e>=vi?Math.round(e/vi)+"d":e>=mi?Math.round(e/mi)+"h":e>=gi?Math.round(e/gi)+"m":e>=pi?Math.round(e/pi)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function wi(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}var yi=t((function(e,t){var r;function n(e){function n(){if(n.enabled){var e=n,i=+new Date,o=i-(r||i);e.diff=o,e.prev=r,e.curr=i,r=i;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var i=t.formatters[n];if("function"==typeof i){var o=a[u];r=i.call(e,o),a.splice(u,1),u--}return r})),t.formatArgs.call(e,a);var c=n.log||t.log||console.log.bind(console);c.apply(e,a)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),"function"==typeof t.init&&t.init(n),n}(t=e.exports=n.debug=n.default=n).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){t.save(e),t.names=[],t.skips=[];for(var r=("string"==typeof e?e:"").split(/[\s,]+/),n=r.length,i=0;i<n;i++)r[i]&&("-"===(e=r[i].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=_i,t.names=[],t.skips=[],t.formatters={}})),bi=(yi.coerce,yi.disable,yi.enable,yi.enabled,yi.humanize,yi.names,yi.skips,yi.formatters,t((function(e,t){function r(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==se&&"env"in se&&(e=se.env.DEBUG),e}(t=e.exports=yi).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),r){var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,n)}},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=r,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(r())})));bi.log,bi.formatArgs,bi.save,bi.load,bi.useColors,bi.storage,bi.colors;var ki,Ei=function(){return!1},xi=function(){throw new Error("tty.ReadStream is not implemented")},Ri={},Ai=t((function(e,t){(t=e.exports=yi).init=function(e){e.inspectOpts={};for(var r=Object.keys(t.inspectOpts),n=0;n<r.length;n++)e.inspectOpts[r[n]]=t.inspectOpts[r[n]]},t.log=function(){return n.write(ir.format.apply(ir,arguments)+"\n")},t.formatArgs=function(e){var r=this.namespace;if(this.useColors){var n=this.color,i="  [3"+n+";1m"+r+" [0m";e[0]=i+e[0].split("\n").join("\n"+i),e.push("[3"+n+"m+"+t.humanize(this.diff)+"[0m")}else e[0]=(new Date).toUTCString()+" "+r+" "+e[0]},t.save=function(e){null==e?delete se.env.DEBUG:se.env.DEBUG=e},t.load=i,t.useColors=function(){return"colors"in t.inspectOpts?Boolean(t.inspectOpts.colors):Ei(r)},t.colors=[6,2,3,4,5,1],t.inspectOpts=Object.keys(se.env).filter((function(e){return/^debug_/i.test(e)})).reduce((function(e,t){var r=t.substring(6).toLowerCase().replace(/_([a-z])/g,(function(e,t){return t.toUpperCase()})),n=se.env[t];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),e[r]=n,e}),{});var r=parseInt(se.env.DEBUG_FD,10)||2;1!==r&&2!==r&&ir.deprecate((function(){}),"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();var n=1===r?se.stdout:2===r?se.stderr:function(e){var t;switch(se.binding("tty_wrap").guessHandleType(e)){case"TTY":(t=new xi(e))._type="tty",t._handle&&t._handle.unref&&t._handle.unref();break;case"FILE":(t=new Ri.SyncWriteStream(e,{autoClose:!1}))._type="fs";break;case"PIPE":case"TCP":(t=new Ri.Socket({fd:e,readable:!1,writable:!0})).readable=!1,t.read=null,t._type="pipe",t._handle&&t._handle.unref&&t._handle.unref();break;default:throw new Error("Implement me. Unknown stream file type!")}return t.fd=e,t._isStdio=!0,t}(r);function i(){return se.env.DEBUG}t.formatters.o=function(e){return this.inspectOpts.colors=this.useColors,ir.inspect(e,this.inspectOpts).split("\n").map((function(e){return e.trim()})).join(" ")},t.formatters.O=function(e){return this.inspectOpts.colors=this.useColors,ir.inspect(e,this.inspectOpts)},t.enable(i())})),Oi=(Ai.init,Ai.log,Ai.formatArgs,Ai.save,Ai.load,Ai.useColors,Ai.colors,Ai.inspectOpts,t((function(e){void 0!==se&&"renderer"===se.type?e.exports=bi:e.exports=Ai})));try{ki=Oi("follow-redirects")}catch(vn){ki=function(){}}var Si=ki,Li=On.URL,Ti=sn.Writable,Ci=Object.create(null);["abort","aborted","connect","error","socket","timeout"].forEach((function(e){Ci[e]=function(t,r,n){this._redirectable.emit(e,t,r,n)}}));var ji=Zi("ERR_FR_REDIRECTION_FAILURE",""),Pi=Zi("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded"),Ui=Zi("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),Mi=Zi("ERR_STREAM_WRITE_AFTER_END","write after end");function zi(e,t){Ti.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],t&&this.on("response",t);var r=this;this._onNativeResponse=function(e){r._processResponse(e)},this._performRequest()}function Bi(e,t){clearTimeout(e._timeout),e._timeout=setTimeout((function(){e.emit("timeout")}),t)}function Ni(){clearTimeout(this._timeout)}function Di(e){var t={maxRedirects:21,maxBodyLength:10485760},r={};return Object.keys(e).forEach((function(n){var i=n+":",o=r[i]=e[n],a=t[n]=Object.create(o);a.request=function(e,n,o){if("string"==typeof e){var a=e;try{e=qi(new Li(a))}catch(t){e=On.parse(a)}}else Li&&e instanceof Li?e=qi(e):(o=n,n=e,e={protocol:i});return"function"==typeof n&&(o=n,n=null),(n=Object.assign({maxRedirects:t.maxRedirects,maxBodyLength:t.maxBodyLength},e,n)).nativeProtocols=r,ri.equal(n.protocol,i,"protocol mismatch"),Si("options",n),new zi(n,o)},a.get=function(e,t,r){var n=a.request(e,t,r);return n.end(),n}})),t}function Ii(){}function qi(e){var t={protocol:e.protocol,hostname:e.hostname.startsWith("[")?e.hostname.slice(1,-1):e.hostname,hash:e.hash,search:e.search,pathname:e.pathname,path:e.pathname+e.search,href:e.href};return""!==e.port&&(t.port=Number(e.port)),t}function Fi(e,t){var r;for(var n in t)e.test(n)&&(r=t[n],delete t[n]);return r}function Zi(e,t){function r(e){Error.captureStackTrace(this,this.constructor),this.message=e||t}return r.prototype=new Error,r.prototype.constructor=r,r.prototype.name="Error ["+e+"]",r.prototype.code=e,r}zi.prototype=Object.create(Ti.prototype),zi.prototype.write=function(e,t,r){if(this._ending)throw new Mi;if(!("string"==typeof e||"object"==typeof e&&"length"in e))throw new TypeError("data should be a string, Buffer or Uint8Array");"function"==typeof t&&(r=t,t=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:t}),this._currentRequest.write(e,t,r)):(this.emit("error",new Ui),this.abort()):r&&r()},zi.prototype.end=function(e,t,r){if("function"==typeof e?(r=e,e=t=null):"function"==typeof t&&(r=t,t=null),e){var n=this,i=this._currentRequest;this.write(e,t,(function(){n._ended=!0,i.end(null,null,r)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,r)},zi.prototype.setHeader=function(e,t){this._options.headers[e]=t,this._currentRequest.setHeader(e,t)},zi.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},zi.prototype.setTimeout=function(e,t){if(t&&this.once("timeout",t),this.socket)Bi(this,e);else{var r=this;this._currentRequest.once("socket",(function(){Bi(r,e)}))}return this.once("response",Ni),this.once("error",Ni),this},["abort","flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){zi.prototype[e]=function(t,r){return this._currentRequest[e](t,r)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(zi.prototype,e,{get:function(){return this._currentRequest[e]}})})),zi.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var t=e.path.indexOf("?");t<0?e.pathname=e.path:(e.pathname=e.path.substring(0,t),e.search=e.path.substring(t))}},zi.prototype._performRequest=function(){var e=this._options.protocol,t=this._options.nativeProtocols[e];if(t){if(this._options.agents){var r=e.substr(0,e.length-1);this._options.agent=this._options.agents[r]}var n=this._currentRequest=t.request(this._options,this._onNativeResponse);for(var i in this._currentUrl=On.format(this._options),n._redirectable=this,Ci)i&&n.on(i,Ci[i]);if(this._isRedirect){var o=0,a=this,s=this._requestBodyBuffers;!function e(t){if(n===a._currentRequest)if(t)a.emit("error",t);else if(o<s.length){var r=s[o++];n.finished||n.write(r.data,r.encoding,e)}else a._ended&&n.end()}()}}else this.emit("error",new TypeError("Unsupported protocol "+e))},zi.prototype._processResponse=function(e){var t=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:t});var r=e.headers.location;if(r&&!1!==this._options.followRedirects&&t>=300&&t<400){if(this._currentRequest.removeAllListeners(),this._currentRequest.on("error",Ii),this._currentRequest.abort(),e.destroy(),++this._redirectCount>this._options.maxRedirects)return void this.emit("error",new Pi);((301===t||302===t)&&"POST"===this._options.method||303===t&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],Fi(/^content-/i,this._options.headers));var n=Fi(/^host$/i,this._options.headers)||On.parse(this._currentUrl).hostname,i=On.resolve(this._currentUrl,r);Si("redirecting to",i),this._isRedirect=!0;var o=On.parse(i);if(Object.assign(this._options,o),o.hostname!==n&&Fi(/^authorization$/i,this._options.headers),"function"==typeof this._options.beforeRedirect){var a={headers:e.headers};try{this._options.beforeRedirect.call(null,this._options,a)}catch(e){return void this.emit("error",e)}this._sanitizeOptions(this._options)}try{this._performRequest()}catch(e){var s=new ji("Redirected request failed: "+e.message);s.cause=e,this.emit("error",s)}}else e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),this._requestBodyBuffers=[]};var Hi=Di({http:Gn,https:Gn}),Yi=Di;Hi.wrap=Yi;var Wi={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};function Gi(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}function Vi(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var o=0;o<n;o++)e[i+o]=t[r+o]}var Xi=Uint8Array,Ki=Uint16Array,$i=Int32Array;function Ji(e){for(var t=e.length;--t>=0;)e[t]=0}var Qi=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],eo=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],to=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],ro=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],no=new Array(576);Ji(no);var io=new Array(60);Ji(io);var oo=new Array(512);Ji(oo);var ao=new Array(256);Ji(ao);var so=new Array(29);Ji(so);var uo,co,ho,fo=new Array(30);function lo(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function po(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function go(e){return e<256?oo[e]:oo[256+(e>>>7)]}function mo(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function vo(e,t,r){e.bi_valid>16-r?(e.bi_buf|=t<<e.bi_valid&65535,mo(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=r-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function _o(e,t,r){vo(e,r[2*t],r[2*t+1])}function wo(e,t){var r=0;do{r|=1&e,e>>>=1,r<<=1}while(--t>0);return r>>>1}function yo(e,t,r){var n,i,o=new Array(16),a=0;for(n=1;n<=15;n++)o[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var s=e[2*i+1];0!==s&&(e[2*i]=wo(o[s]++,s))}}function bo(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function ko(e){e.bi_valid>8?mo(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function Eo(e,t,r,n){var i=2*t,o=2*r;return e[i]<e[o]||e[i]===e[o]&&n[t]<=n[r]}function xo(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&Eo(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!Eo(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function Ro(e,t,r){var n,i,o,a,s=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*s]<<8|e.pending_buf[e.d_buf+2*s+1],i=e.pending_buf[e.l_buf+s],s++,0===n?_o(e,i,t):(_o(e,(o=ao[i])+256+1,t),0!==(a=Qi[o])&&vo(e,i-=so[o],a),_o(e,o=go(--n),r),0!==(a=eo[o])&&vo(e,n-=fo[o],a))}while(s<e.last_lit);_o(e,256,t)}function Ao(e,t){var r,n,i,o=t.dyn_tree,a=t.stat_desc.static_tree,s=t.stat_desc.has_stree,u=t.stat_desc.elems,c=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<u;r++)0!==o[2*r]?(e.heap[++e.heap_len]=c=r,e.depth[r]=0):o[2*r+1]=0;for(;e.heap_len<2;)o[2*(i=e.heap[++e.heap_len]=c<2?++c:0)]=1,e.depth[i]=0,e.opt_len--,s&&(e.static_len-=a[2*i+1]);for(t.max_code=c,r=e.heap_len>>1;r>=1;r--)xo(e,o,r);i=u;do{r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],xo(e,o,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,o[2*i]=o[2*r]+o[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,o[2*r+1]=o[2*n+1]=i,e.heap[1]=i++,xo(e,o,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,o,a,s,u=t.dyn_tree,c=t.max_code,h=t.stat_desc.static_tree,f=t.stat_desc.has_stree,l=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,g=0;for(o=0;o<=15;o++)e.bl_count[o]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)(o=u[2*u[2*(n=e.heap[r])+1]+1]+1)>p&&(o=p,g++),u[2*n+1]=o,n>c||(e.bl_count[o]++,a=0,n>=d&&(a=l[n-d]),s=u[2*n],e.opt_len+=s*(o+a),f&&(e.static_len+=s*(h[2*n+1]+a)));if(0!==g){do{for(o=p-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[p]--,g-=2}while(g>0);for(o=p;0!==o;o--)for(n=e.bl_count[o];0!==n;)(i=e.heap[--r])>c||(u[2*i+1]!==o&&(e.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),n--)}}(e,t),yo(o,c,e.bl_count)}function Oo(e,t,r){var n,i,o=-1,a=t[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++s<u&&i===a||(s<c?e.bl_tree[2*i]+=s:0!==i?(i!==o&&e.bl_tree[2*i]++,e.bl_tree[32]++):s<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4))}function So(e,t,r){var n,i,o=-1,a=t[1],s=0,u=7,c=4;for(0===a&&(u=138,c=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++s<u&&i===a)){if(s<c)do{_o(e,i,e.bl_tree)}while(0!=--s);else 0!==i?(i!==o&&(_o(e,i,e.bl_tree),s--),_o(e,16,e.bl_tree),vo(e,s-3,2)):s<=10?(_o(e,17,e.bl_tree),vo(e,s-3,3)):(_o(e,18,e.bl_tree),vo(e,s-11,7));s=0,o=i,0===a?(u=138,c=3):i===a?(u=6,c=3):(u=7,c=4)}}Ji(fo);var Lo=!1;function To(e,t,r,n){vo(e,0+(n?1:0),3),function(e,t,r,n){ko(e),mo(e,r),mo(e,~r),Vi(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r)}function Co(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(ao[r]+256+1)]++,e.dyn_dtree[2*go(t)]++),e.last_lit===e.lit_bufsize-1}function jo(e,t,r,n){for(var i=65535&e|0,o=e>>>16&65535|0,a=0;0!==r;){r-=a=r>2e3?2e3:r;do{o=o+(i=i+t[n++]|0)|0}while(--a);i%=65521,o%=65521}return i|o<<16|0}var Po=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();function Uo(e,t,r,n){var i=Po,o=n+r;e^=-1;for(var a=n;a<o;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}var Mo,zo=-2,Bo=258,No=262,Do=103,Io=113,qo=666;function Fo(e,t){return e.msg=Wi[t],t}function Zo(e){return(e<<1)-(e>4?9:0)}function Ho(e){for(var t=e.length;--t>=0;)e[t]=0}function Yo(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(Vi(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function Wo(e,t){(function(e,t,r,n){var i,o,a=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),Ao(e,e.l_desc),Ao(e,e.d_desc),a=function(e){var t;for(Oo(e,e.dyn_ltree,e.l_desc.max_code),Oo(e,e.dyn_dtree,e.d_desc.max_code),Ao(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*ro[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(o=e.static_len+3+7>>>3)<=i&&(i=o)):i=o=r+5,r+4<=i&&-1!==t?To(e,t,r,n):4===e.strategy||o===i?(vo(e,2+(n?1:0),3),Ro(e,no,io)):(vo(e,4+(n?1:0),3),function(e,t,r,n){var i;for(vo(e,t-257,5),vo(e,r-1,5),vo(e,n-4,4),i=0;i<n;i++)vo(e,e.bl_tree[2*ro[i]+1],3);So(e,e.dyn_ltree,t-1),So(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),Ro(e,e.dyn_ltree,e.dyn_dtree)),bo(e),n&&ko(e)})(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Yo(e.strm)}function Go(e,t){e.pending_buf[e.pending++]=t}function Vo(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function Xo(e,t){var r,n,i=e.max_chain_length,o=e.strstart,a=e.prev_length,s=e.nice_match,u=e.strstart>e.w_size-No?e.strstart-(e.w_size-No):0,c=e.window,h=e.w_mask,f=e.prev,l=e.strstart+Bo,d=c[o+a-1],p=c[o+a];e.prev_length>=e.good_match&&(i>>=2),s>e.lookahead&&(s=e.lookahead);do{if(c[(r=t)+a]===p&&c[r+a-1]===d&&c[r]===c[o]&&c[++r]===c[o+1]){o+=2,r++;do{}while(c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&c[++o]===c[++r]&&o<l);if(n=Bo-(l-o),o=l-Bo,n>a){if(e.match_start=t,a=n,n>=s)break;d=c[o+a-1],p=c[o+a]}}}while((t=f[t&h])>u&&0!=--i);return a<=e.lookahead?a:e.lookahead}function Ko(e){var t,r,n,i,o,a,s,u,c,h,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-No)){Vi(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;do{n=e.head[--t],e.head[t]=n>=f?n-f:0}while(--r);t=r=f;do{n=e.prev[--t],e.prev[t]=n>=f?n-f:0}while(--r);i+=f}if(0===e.strm.avail_in)break;if(a=e.strm,s=e.window,u=e.strstart+e.lookahead,c=i,h=void 0,(h=a.avail_in)>c&&(h=c),r=0===h?0:(a.avail_in-=h,Vi(s,a.input,a.next_in,h,u),1===a.state.wrap?a.adler=jo(a.adler,s,h,u):2===a.state.wrap&&(a.adler=Uo(a.adler,s,h,u)),a.next_in+=h,a.total_in+=h,h),e.lookahead+=r,e.lookahead+e.insert>=3)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+3-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<No&&0!==e.strm.avail_in)}function $o(e,t){for(var r,n;;){if(e.lookahead<No){if(Ko(e),e.lookahead<No&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-No&&(e.match_length=Xo(e,r)),e.match_length>=3)if(n=Co(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=Co(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(Wo(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(Wo(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Wo(e,!1),0===e.strm.avail_out)?1:2}function Jo(e,t){for(var r,n,i;;){if(e.lookahead<No){if(Ko(e),e.lookahead<No&&0===t)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-No&&(e.match_length=Xo(e,r),e.match_length<=5&&(1===e.strategy||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-3,n=Co(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,n&&(Wo(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=Co(e,0,e.window[e.strstart-1]))&&Wo(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=Co(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(Wo(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Wo(e,!1),0===e.strm.avail_out)?1:2}function Qo(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function ea(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Ki(1146),this.dyn_dtree=new Ki(122),this.bl_tree=new Ki(78),Ho(this.dyn_ltree),Ho(this.dyn_dtree),Ho(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Ki(16),this.heap=new Ki(573),Ho(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Ki(573),Ho(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function ta(e){var t=function(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:Io,e.adler=2===t.wrap?0:1,t.last_flush=0,function(e){Lo||(function(){var e,t,r,n,i,o=new Array(16);for(r=0,n=0;n<28;n++)for(so[n]=r,e=0;e<1<<Qi[n];e++)ao[r++]=n;for(ao[r-1]=n,i=0,n=0;n<16;n++)for(fo[n]=i,e=0;e<1<<eo[n];e++)oo[i++]=n;for(i>>=7;n<30;n++)for(fo[n]=i<<7,e=0;e<1<<eo[n]-7;e++)oo[256+i++]=n;for(t=0;t<=15;t++)o[t]=0;for(e=0;e<=143;)no[2*e+1]=8,e++,o[8]++;for(;e<=255;)no[2*e+1]=9,e++,o[9]++;for(;e<=279;)no[2*e+1]=7,e++,o[7]++;for(;e<=287;)no[2*e+1]=8,e++,o[8]++;for(yo(no,287,o),e=0;e<30;e++)io[2*e+1]=5,io[2*e]=wo(e,5);uo=new lo(no,Qi,257,286,15),co=new lo(io,eo,0,30,15),ho=new lo(new Array(0),to,0,19,7)}(),Lo=!0),e.l_desc=new po(e.dyn_ltree,uo),e.d_desc=new po(e.dyn_dtree,co),e.bl_desc=new po(e.bl_tree,ho),e.bi_buf=0,e.bi_valid=0,bo(e)}(t),0):Fo(e,zo)}(e);return 0===t&&function(e){e.window_size=2*e.w_size,Ho(e.head),e.max_lazy_match=Mo[e.level].max_lazy,e.good_match=Mo[e.level].good_length,e.nice_match=Mo[e.level].nice_length,e.max_chain_length=Mo[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),t}function ra(e,t){var r,n,i,o;if(!e||!e.state||t>5||t<0)return e?Fo(e,zo):zo;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||n.status===qo&&4!==t)return Fo(e,0===e.avail_out?-5:zo);if(n.strm=e,r=n.last_flush,n.last_flush=t,42===n.status)if(2===n.wrap)e.adler=0,Go(n,31),Go(n,139),Go(n,8),n.gzhead?(Go(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),Go(n,255&n.gzhead.time),Go(n,n.gzhead.time>>8&255),Go(n,n.gzhead.time>>16&255),Go(n,n.gzhead.time>>24&255),Go(n,9===n.level?2:n.strategy>=2||n.level<2?4:0),Go(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(Go(n,255&n.gzhead.extra.length),Go(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=Uo(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(Go(n,0),Go(n,0),Go(n,0),Go(n,0),Go(n,0),Go(n,9===n.level?2:n.strategy>=2||n.level<2?4:0),Go(n,3),n.status=Io);else{var a=8+(n.w_bits-8<<4)<<8;a|=(n.strategy>=2||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=Io,Vo(n,a),0!==n.strstart&&(Vo(n,e.adler>>>16),Vo(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=Uo(e.adler,n.pending_buf,n.pending-i,i)),Yo(e),i=n.pending,n.pending!==n.pending_buf_size));)Go(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=Uo(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Uo(e.adler,n.pending_buf,n.pending-i,i)),Yo(e),i=n.pending,n.pending===n.pending_buf_size)){o=1;break}o=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,Go(n,o)}while(0!==o);n.gzhead.hcrc&&n.pending>i&&(e.adler=Uo(e.adler,n.pending_buf,n.pending-i,i)),0===o&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=Uo(e.adler,n.pending_buf,n.pending-i,i)),Yo(e),i=n.pending,n.pending===n.pending_buf_size)){o=1;break}o=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,Go(n,o)}while(0!==o);n.gzhead.hcrc&&n.pending>i&&(e.adler=Uo(e.adler,n.pending_buf,n.pending-i,i)),0===o&&(n.status=Do)}else n.status=Do;if(n.status===Do&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&Yo(e),n.pending+2<=n.pending_buf_size&&(Go(n,255&e.adler),Go(n,e.adler>>8&255),e.adler=0,n.status=Io)):n.status=Io),0!==n.pending){if(Yo(e),0===e.avail_out)return n.last_flush=-1,0}else if(0===e.avail_in&&Zo(t)<=Zo(r)&&4!==t)return Fo(e,-5);if(n.status===qo&&0!==e.avail_in)return Fo(e,-5);if(0!==e.avail_in||0!==n.lookahead||0!==t&&n.status!==qo){var s=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(Ko(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,r=Co(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(Wo(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(Wo(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Wo(e,!1),0===e.strm.avail_out)?1:2}(n,t):3===n.strategy?function(e,t){for(var r,n,i,o,a=e.window;;){if(e.lookahead<=Bo){if(Ko(e),e.lookahead<=Bo&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){o=e.strstart+Bo;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<o);e.match_length=Bo-(o-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(r=Co(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=Co(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(Wo(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(Wo(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(Wo(e,!1),0===e.strm.avail_out)?1:2}(n,t):Mo[n.level].func(n,t);if(3!==s&&4!==s||(n.status=qo),1===s||3===s)return 0===e.avail_out&&(n.last_flush=-1),0;if(2===s&&(1===t?function(e){vo(e,2,3),_o(e,256,no),function(e){16===e.bi_valid?(mo(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}(n):5!==t&&(To(n,0,0,!1),3===t&&(Ho(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),Yo(e),0===e.avail_out))return n.last_flush=-1,0}return 4!==t?0:n.wrap<=0?1:(2===n.wrap?(Go(n,255&e.adler),Go(n,e.adler>>8&255),Go(n,e.adler>>16&255),Go(n,e.adler>>24&255),Go(n,255&e.total_in),Go(n,e.total_in>>8&255),Go(n,e.total_in>>16&255),Go(n,e.total_in>>24&255)):(Vo(n,e.adler>>>16),Vo(n,65535&e.adler)),Yo(e),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?0:1)}function na(e,t){var r,n,i,o,a,s,u,c,h,f,l,d,p,g,m,v,_,w,y,b,k,E,x,R,A;r=e.state,n=e.next_in,R=e.input,i=n+(e.avail_in-5),o=e.next_out,A=e.output,a=o-(t-e.avail_out),s=o+(e.avail_out-257),u=r.dmax,c=r.wsize,h=r.whave,f=r.wnext,l=r.window,d=r.hold,p=r.bits,g=r.lencode,m=r.distcode,v=(1<<r.lenbits)-1,_=(1<<r.distbits)-1;e:do{p<15&&(d+=R[n++]<<p,p+=8,d+=R[n++]<<p,p+=8),w=g[d&v];t:for(;;){if(d>>>=y=w>>>24,p-=y,0==(y=w>>>16&255))A[o++]=65535&w;else{if(!(16&y)){if(0==(64&y)){w=g[(65535&w)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}b=65535&w,(y&=15)&&(p<y&&(d+=R[n++]<<p,p+=8),b+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=R[n++]<<p,p+=8,d+=R[n++]<<p,p+=8),w=m[d&_];r:for(;;){if(d>>>=y=w>>>24,p-=y,!(16&(y=w>>>16&255))){if(0==(64&y)){w=m[(65535&w)+(d&(1<<y)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&w,p<(y&=15)&&(d+=R[n++]<<p,(p+=8)<y&&(d+=R[n++]<<p,p+=8)),(k+=d&(1<<y)-1)>u){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=y,p-=y,k>(y=o-a)){if((y=k-y)>h&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(E=0,x=l,0===f){if(E+=c-y,y<b){b-=y;do{A[o++]=l[E++]}while(--y);E=o-k,x=A}}else if(f<y){if(E+=c+f-y,(y-=f)<b){b-=y;do{A[o++]=l[E++]}while(--y);if(E=0,f<b){b-=y=f;do{A[o++]=l[E++]}while(--y);E=o-k,x=A}}}else if(E+=f-y,y<b){b-=y;do{A[o++]=l[E++]}while(--y);E=o-k,x=A}for(;b>2;)A[o++]=x[E++],A[o++]=x[E++],A[o++]=x[E++],b-=3;b&&(A[o++]=x[E++],b>1&&(A[o++]=x[E++]))}else{E=o-k;do{A[o++]=A[E++],A[o++]=A[E++],A[o++]=A[E++],b-=3}while(b>2);b&&(A[o++]=A[E++],b>1&&(A[o++]=A[E++]))}break}}break}}while(n<i&&o<s);n-=b=p>>3,d&=(1<<(p-=b<<3))-1,e.next_in=n,e.next_out=o,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=o<s?s-o+257:257-(o-s),r.hold=d,r.bits=p}Mo=[new Qo(0,0,0,0,(function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Ko(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,Wo(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-No&&(Wo(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(Wo(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(Wo(e,!1),e.strm.avail_out),1)})),new Qo(4,4,8,4,$o),new Qo(4,5,16,8,$o),new Qo(4,6,32,32,$o),new Qo(4,4,16,16,Jo),new Qo(8,16,32,32,Jo),new Qo(8,16,128,128,Jo),new Qo(8,32,128,256,Jo),new Qo(32,128,258,1024,Jo),new Qo(32,258,258,4096,Jo)];var ia=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],oa=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],aa=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],sa=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function ua(e,t,r,n,i,o,a,s){var u,c,h,f,l,d,p,g,m,v=s.bits,_=0,w=0,y=0,b=0,k=0,E=0,x=0,R=0,A=0,O=0,S=null,L=0,T=new Ki(16),C=new Ki(16),j=null,P=0;for(_=0;_<=15;_++)T[_]=0;for(w=0;w<n;w++)T[t[r+w]]++;for(k=v,b=15;b>=1&&0===T[b];b--);if(k>b&&(k=b),0===b)return i[o++]=20971520,i[o++]=20971520,s.bits=1,0;for(y=1;y<b&&0===T[y];y++);for(k<y&&(k=y),R=1,_=1;_<=15;_++)if(R<<=1,(R-=T[_])<0)return-1;if(R>0&&(0===e||1!==b))return-1;for(C[1]=0,_=1;_<15;_++)C[_+1]=C[_]+T[_];for(w=0;w<n;w++)0!==t[r+w]&&(a[C[t[r+w]]++]=w);if(0===e?(S=j=a,d=19):1===e?(S=ia,L-=257,j=oa,P-=257,d=256):(S=aa,j=sa,d=-1),O=0,w=0,_=y,l=o,E=k,x=0,h=-1,f=(A=1<<k)-1,1===e&&A>852||2===e&&A>592)return 1;for(;;){p=_-x,a[w]<d?(g=0,m=a[w]):a[w]>d?(g=j[P+a[w]],m=S[L+a[w]]):(g=96,m=0),u=1<<_-x,y=c=1<<E;do{i[l+(O>>x)+(c-=u)]=p<<24|g<<16|m|0}while(0!==c);for(u=1<<_-1;O&u;)u>>=1;if(0!==u?(O&=u-1,O+=u):O=0,w++,0==--T[_]){if(_===b)break;_=t[r+a[w]]}if(_>k&&(O&f)!==h){for(0===x&&(x=k),l+=y,R=1<<(E=_-x);E+x<b&&!((R-=T[E+x])<=0);)E++,R<<=1;if(A+=1<<E,1===e&&A>852||2===e&&A>592)return 1;i[h=O&f]=k<<24|E<<16|l-o|0}}return 0!==O&&(i[l+O]=_-x<<24|64<<16|0),s.bits=k,0}var ca=-2,ha=12,fa=30;function la(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function da(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Ki(320),this.work=new Ki(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function pa(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,function(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new $i(852),t.distcode=t.distdyn=new $i(592),t.sane=1,t.back=-1,0):ca}(e)):ca}var ga,ma,va,_a=!0;function wa(e){if(_a){var t;for(ga=new $i(512),ma=new $i(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(ua(1,e.lens,0,288,ga,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;ua(2,e.lens,0,32,ma,0,e.work,{bits:5}),_a=!1}e.lencode=ga,e.lenbits=9,e.distcode=ma,e.distbits=5}function ya(e){if(e<1||e>7)throw new TypeError("Bad argument");this.mode=e,this.init_done=!1,this.write_in_progress=!1,this.pending_close=!1,this.windowBits=0,this.level=0,this.memLevel=0,this.strategy=0,this.dictionary=null}function ba(e,t){for(var r=0;r<e.length;r++)this[t+r]=e[r]}ya.prototype.init=function(e,t,r,n,i){var o;switch(this.windowBits=e,this.level=t,this.memLevel=r,this.strategy=n,3!==this.mode&&4!==this.mode||(this.windowBits+=16),7===this.mode&&(this.windowBits+=32),5!==this.mode&&6!==this.mode||(this.windowBits=-this.windowBits),this.strm=new Gi,this.mode){case 1:case 3:case 5:o=function(e,t,r,n,i,o){if(!e)return zo;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):n>15&&(a=2,n-=16),i<1||i>9||n<8||n>15||t<0||t>9||o<0||o>4)return Fo(e,zo);8===n&&(n=9);var s=new ea;return e.state=s,s.strm=e,s.wrap=a,s.gzhead=null,s.w_bits=n,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=i+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+3-1)/3),s.window=new Xi(2*s.w_size),s.head=new Ki(s.hash_size),s.prev=new Ki(s.w_size),s.lit_bufsize=1<<i+6,s.pending_buf_size=4*s.lit_bufsize,s.pending_buf=new Xi(s.pending_buf_size),s.d_buf=1*s.lit_bufsize,s.l_buf=3*s.lit_bufsize,s.level=t,s.strategy=o,s.method=8,ta(e)}(this.strm,this.level,0,this.windowBits,this.memLevel,this.strategy);break;case 2:case 4:case 6:case 7:o=function(e,t){var r,n;return e?(n=new da,e.state=n,n.window=null,0!==(r=function(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?ca:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,pa(e))):ca}(e,t))&&(e.state=null),r):ca}(this.strm,this.windowBits);break;default:throw new Error("Unknown mode "+this.mode)}0===o?(this.write_in_progress=!1,this.init_done=!0):this._error(o)},ya.prototype.params=function(){throw new Error("deflateParams Not supported")},ya.prototype._writeCheck=function(){if(!this.init_done)throw new Error("write before init");if(0===this.mode)throw new Error("already finalized");if(this.write_in_progress)throw new Error("write already in progress");if(this.pending_close)throw new Error("close is pending")},ya.prototype.write=function(e,t,r,n,i,o,a){this._writeCheck(),this.write_in_progress=!0;var s=this;return se.nextTick((function(){s.write_in_progress=!1;var u=s._write(e,t,r,n,i,o,a);s.callback(u[0],u[1]),s.pending_close&&s.close()})),this},ya.prototype.writeSync=function(e,t,r,n,i,o,a){return this._writeCheck(),this._write(e,t,r,n,i,o,a)},ya.prototype._write=function(e,t,r,n,i,o,a){if(this.write_in_progress=!0,0!==e&&1!==e&&2!==e&&3!==e&&4!==e&&5!==e)throw new Error("Invalid flush value");null==t&&(t=new Le(0),n=0,r=0),i._set?i.set=i._set:i.set=ba;var s,u=this.strm;switch(u.avail_in=n,u.input=t,u.next_in=r,u.avail_out=a,u.output=i,u.next_out=o,this.mode){case 1:case 3:case 5:s=ra(u,e);break;case 7:case 2:case 4:case 6:s=function(e,t){var r,n,i,o,a,s,u,c,h,f,l,d,p,g,m,v,_,w,y,b,k,E,x,R,A=0,O=new Xi(4),S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return ca;(r=e.state).mode===ha&&(r.mode=13),a=e.next_out,i=e.output,u=e.avail_out,o=e.next_in,n=e.input,s=e.avail_in,c=r.hold,h=r.bits,f=s,l=u,E=0;e:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;h<16;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(2&r.wrap&&35615===c){r.check=0,O[0]=255&c,O[1]=c>>>8&255,r.check=Uo(r.check,O,2,0),c=0,h=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&c)<<8)+(c>>8))%31){e.msg="incorrect header check",r.mode=fa;break}if(8!=(15&c)){e.msg="unknown compression method",r.mode=fa;break}if(h-=4,k=8+(15&(c>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=fa;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&c?10:ha,c=0,h=0;break;case 2:for(;h<16;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(r.flags=c,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=fa;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=fa;break}r.head&&(r.head.text=c>>8&1),512&r.flags&&(O[0]=255&c,O[1]=c>>>8&255,r.check=Uo(r.check,O,2,0)),c=0,h=0,r.mode=3;case 3:for(;h<32;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}r.head&&(r.head.time=c),512&r.flags&&(O[0]=255&c,O[1]=c>>>8&255,O[2]=c>>>16&255,O[3]=c>>>24&255,r.check=Uo(r.check,O,4,0)),c=0,h=0,r.mode=4;case 4:for(;h<16;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}r.head&&(r.head.xflags=255&c,r.head.os=c>>8),512&r.flags&&(O[0]=255&c,O[1]=c>>>8&255,r.check=Uo(r.check,O,2,0)),c=0,h=0,r.mode=5;case 5:if(1024&r.flags){for(;h<16;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}r.length=c,r.head&&(r.head.extra_len=c),512&r.flags&&(O[0]=255&c,O[1]=c>>>8&255,r.check=Uo(r.check,O,2,0)),c=0,h=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&((d=r.length)>s&&(d=s),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),Vi(r.head.extra,n,o,d,k)),512&r.flags&&(r.check=Uo(r.check,n,d,o)),s-=d,o+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===s)break e;d=0;do{k=n[o+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k))}while(k&&d<s);if(512&r.flags&&(r.check=Uo(r.check,n,d,o)),s-=d,o+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===s)break e;d=0;do{k=n[o+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k))}while(k&&d<s);if(512&r.flags&&(r.check=Uo(r.check,n,d,o)),s-=d,o+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;h<16;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(c!==(65535&r.check)){e.msg="header crc mismatch",r.mode=fa;break}c=0,h=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=ha;break;case 10:for(;h<32;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}e.adler=r.check=la(c),c=0,h=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=u,e.next_in=o,e.avail_in=s,r.hold=c,r.bits=h,2;e.adler=r.check=1,r.mode=ha;case ha:if(5===t||6===t)break e;case 13:if(r.last){c>>>=7&h,h-=7&h,r.mode=27;break}for(;h<3;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}switch(r.last=1&c,h-=1,3&(c>>>=1)){case 0:r.mode=14;break;case 1:if(wa(r),r.mode=20,6===t){c>>>=2,h-=2;break e}break;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=fa}c>>>=2,h-=2;break;case 14:for(c>>>=7&h,h-=7&h;h<32;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if((65535&c)!=(c>>>16^65535)){e.msg="invalid stored block lengths",r.mode=fa;break}if(r.length=65535&c,c=0,h=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(d>s&&(d=s),d>u&&(d=u),0===d)break e;Vi(i,n,o,d,a),s-=d,o+=d,u-=d,a+=d,r.length-=d;break}r.mode=ha;break;case 17:for(;h<14;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(r.nlen=257+(31&c),c>>>=5,h-=5,r.ndist=1+(31&c),c>>>=5,h-=5,r.ncode=4+(15&c),c>>>=4,h-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=fa;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;h<3;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}r.lens[S[r.have++]]=7&c,c>>>=3,h-=3}for(;r.have<19;)r.lens[S[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,x={bits:r.lenbits},E=ua(0,r.lens,0,19,r.lencode,0,r.work,x),r.lenbits=x.bits,E){e.msg="invalid code lengths set",r.mode=fa;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;v=(A=r.lencode[c&(1<<r.lenbits)-1])>>>16&255,_=65535&A,!((m=A>>>24)<=h);){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(_<16)c>>>=m,h-=m,r.lens[r.have++]=_;else{if(16===_){for(R=m+2;h<R;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(c>>>=m,h-=m,0===r.have){e.msg="invalid bit length repeat",r.mode=fa;break}k=r.lens[r.have-1],d=3+(3&c),c>>>=2,h-=2}else if(17===_){for(R=m+3;h<R;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}h-=m,k=0,d=3+(7&(c>>>=m)),c>>>=3,h-=3}else{for(R=m+7;h<R;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}h-=m,k=0,d=11+(127&(c>>>=m)),c>>>=7,h-=7}if(r.have+d>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=fa;break}for(;d--;)r.lens[r.have++]=k}}if(r.mode===fa)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=fa;break}if(r.lenbits=9,x={bits:r.lenbits},E=ua(1,r.lens,0,r.nlen,r.lencode,0,r.work,x),r.lenbits=x.bits,E){e.msg="invalid literal/lengths set",r.mode=fa;break}if(r.distbits=6,r.distcode=r.distdyn,x={bits:r.distbits},E=ua(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,x),r.distbits=x.bits,E){e.msg="invalid distances set",r.mode=fa;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(s>=6&&u>=258){e.next_out=a,e.avail_out=u,e.next_in=o,e.avail_in=s,r.hold=c,r.bits=h,na(e,l),a=e.next_out,i=e.output,u=e.avail_out,o=e.next_in,n=e.input,s=e.avail_in,c=r.hold,h=r.bits,r.mode===ha&&(r.back=-1);break}for(r.back=0;v=(A=r.lencode[c&(1<<r.lenbits)-1])>>>16&255,_=65535&A,!((m=A>>>24)<=h);){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(v&&0==(240&v)){for(w=m,y=v,b=_;v=(A=r.lencode[b+((c&(1<<w+y)-1)>>w)])>>>16&255,_=65535&A,!(w+(m=A>>>24)<=h);){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}c>>>=w,h-=w,r.back+=w}if(c>>>=m,h-=m,r.back+=m,r.length=_,0===v){r.mode=26;break}if(32&v){r.back=-1,r.mode=ha;break}if(64&v){e.msg="invalid literal/length code",r.mode=fa;break}r.extra=15&v,r.mode=22;case 22:if(r.extra){for(R=r.extra;h<R;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}r.length+=c&(1<<r.extra)-1,c>>>=r.extra,h-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;v=(A=r.distcode[c&(1<<r.distbits)-1])>>>16&255,_=65535&A,!((m=A>>>24)<=h);){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(0==(240&v)){for(w=m,y=v,b=_;v=(A=r.distcode[b+((c&(1<<w+y)-1)>>w)])>>>16&255,_=65535&A,!(w+(m=A>>>24)<=h);){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}c>>>=w,h-=w,r.back+=w}if(c>>>=m,h-=m,r.back+=m,64&v){e.msg="invalid distance code",r.mode=fa;break}r.offset=_,r.extra=15&v,r.mode=24;case 24:if(r.extra){for(R=r.extra;h<R;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}r.offset+=c&(1<<r.extra)-1,c>>>=r.extra,h-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=fa;break}r.mode=25;case 25:if(0===u)break e;if(d=l-u,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=fa;break}d>r.wnext?(d-=r.wnext,p=r.wsize-d):p=r.wnext-d,d>r.length&&(d=r.length),g=r.window}else g=i,p=a-r.offset,d=r.length;d>u&&(d=u),u-=d,r.length-=d;do{i[a++]=g[p++]}while(--d);0===r.length&&(r.mode=21);break;case 26:if(0===u)break e;i[a++]=r.length,u--,r.mode=21;break;case 27:if(r.wrap){for(;h<32;){if(0===s)break e;s--,c|=n[o++]<<h,h+=8}if(l-=u,e.total_out+=l,r.total+=l,l&&(e.adler=r.check=r.flags?Uo(r.check,i,l,a-l):jo(r.check,i,l,a-l)),l=u,(r.flags?c:la(c))!==r.check){e.msg="incorrect data check",r.mode=fa;break}c=0,h=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;h<32;){if(0===s)break e;s--,c+=n[o++]<<h,h+=8}if(c!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=fa;break}c=0,h=0}r.mode=29;case 29:E=1;break e;case fa:E=-3;break e;case 31:return-4;case 32:default:return ca}return e.next_out=a,e.avail_out=u,e.next_in=o,e.avail_in=s,r.hold=c,r.bits=h,(r.wsize||l!==e.avail_out&&r.mode<fa&&(r.mode<27||4!==t))&&function(e,t,r,n){var i,o=e.state;null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new Xi(o.wsize)),n>=o.wsize?(Vi(o.window,t,r-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((i=o.wsize-o.wnext)>n&&(i=n),Vi(o.window,t,r-n,i,o.wnext),(n-=i)?(Vi(o.window,t,r-n,n,0),o.wnext=n,o.whave=o.wsize):(o.wnext+=i,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=i)))}(e,e.output,e.next_out,l-e.avail_out),f-=e.avail_in,l-=e.avail_out,e.total_in+=f,e.total_out+=l,r.total+=l,r.wrap&&l&&(e.adler=r.check=r.flags?Uo(r.check,i,l,e.next_out-l):jo(r.check,i,l,e.next_out-l)),e.data_type=r.bits+(r.last?64:0)+(r.mode===ha?128:0)+(20===r.mode||15===r.mode?256:0),(0===f&&0===l||4===t)&&0===E&&(E=-5),E}(u,e);break;default:throw new Error("Unknown mode "+this.mode)}return 1!==s&&0!==s&&this._error(s),this.write_in_progress=!1,[u.avail_in,u.avail_out]},ya.prototype.close=function(){this.write_in_progress?this.pending_close=!0:(this.pending_close=!1,1===this.mode||3===this.mode||5===this.mode?function(e){var t;e&&e.state&&(42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&t!==Do&&t!==Io&&t!==qo?Fo(e,zo):(e.state=null,t===Io&&Fo(e,-3)))}(this.strm):function(e){if(!e||!e.state)return ca;var t=e.state;t.window&&(t.window=null),e.state=null}(this.strm),this.mode=0)},ya.prototype.reset=function(){switch(this.mode){case 1:case 5:va=ta(this.strm);break;case 2:case 6:va=pa(this.strm)}0!==va&&this._error(va)},ya.prototype._error=function(e){this.onerror(Wi[e]+": "+this.strm.msg,e),this.write_in_progress=!1,this.pending_close&&this.close()};var ka=Object.freeze({__proto__:null,NONE:0,DEFLATE:1,INFLATE:2,GZIP:3,GUNZIP:4,DEFLATERAW:5,INFLATERAW:6,UNZIP:7,Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8,Zlib:ya}),Ea={};Object.keys(ka).forEach((function(e){Ea[e]=ka[e]})),Ea.Z_MIN_WINDOWBITS=8,Ea.Z_MAX_WINDOWBITS=15,Ea.Z_DEFAULT_WINDOWBITS=15,Ea.Z_MIN_CHUNK=64,Ea.Z_MAX_CHUNK=1/0,Ea.Z_DEFAULT_CHUNK=16384,Ea.Z_MIN_MEMLEVEL=1,Ea.Z_MAX_MEMLEVEL=9,Ea.Z_DEFAULT_MEMLEVEL=8,Ea.Z_MIN_LEVEL=-1,Ea.Z_MAX_LEVEL=9,Ea.Z_DEFAULT_LEVEL=Ea.Z_DEFAULT_COMPRESSION;var xa={Z_OK:Ea.Z_OK,Z_STREAM_END:Ea.Z_STREAM_END,Z_NEED_DICT:Ea.Z_NEED_DICT,Z_ERRNO:Ea.Z_ERRNO,Z_STREAM_ERROR:Ea.Z_STREAM_ERROR,Z_DATA_ERROR:Ea.Z_DATA_ERROR,Z_MEM_ERROR:Ea.Z_MEM_ERROR,Z_BUF_ERROR:Ea.Z_BUF_ERROR,Z_VERSION_ERROR:Ea.Z_VERSION_ERROR};function Ra(e){if(!(this instanceof Ra))return new Ra(e);ja.call(this,e,Ea.DEFLATE)}function Aa(e){if(!(this instanceof Aa))return new Aa(e);ja.call(this,e,Ea.INFLATE)}function Oa(e){if(!(this instanceof Oa))return new Oa(e);ja.call(this,e,Ea.GZIP)}function Sa(e){if(!(this instanceof Sa))return new Sa(e);ja.call(this,e,Ea.GUNZIP)}function La(e){if(!(this instanceof La))return new La(e);ja.call(this,e,Ea.DEFLATERAW)}function Ta(e){if(!(this instanceof Ta))return new Ta(e);ja.call(this,e,Ea.INFLATERAW)}function Ca(e){if(!(this instanceof Ca))return new Ca(e);ja.call(this,e,Ea.UNZIP)}function ja(e,t){if(this._opts=e=e||{},this._chunkSize=e.chunkSize||Ea.Z_DEFAULT_CHUNK,nn.call(this,e),e.flush&&e.flush!==Ea.Z_NO_FLUSH&&e.flush!==Ea.Z_PARTIAL_FLUSH&&e.flush!==Ea.Z_SYNC_FLUSH&&e.flush!==Ea.Z_FULL_FLUSH&&e.flush!==Ea.Z_FINISH&&e.flush!==Ea.Z_BLOCK)throw new Error("Invalid flush flag: "+e.flush);if(this._flushFlag=e.flush||Ea.Z_NO_FLUSH,e.chunkSize&&(e.chunkSize<Ea.Z_MIN_CHUNK||e.chunkSize>Ea.Z_MAX_CHUNK))throw new Error("Invalid chunk size: "+e.chunkSize);if(e.windowBits&&(e.windowBits<Ea.Z_MIN_WINDOWBITS||e.windowBits>Ea.Z_MAX_WINDOWBITS))throw new Error("Invalid windowBits: "+e.windowBits);if(e.level&&(e.level<Ea.Z_MIN_LEVEL||e.level>Ea.Z_MAX_LEVEL))throw new Error("Invalid compression level: "+e.level);if(e.memLevel&&(e.memLevel<Ea.Z_MIN_MEMLEVEL||e.memLevel>Ea.Z_MAX_MEMLEVEL))throw new Error("Invalid memLevel: "+e.memLevel);if(e.strategy&&e.strategy!=Ea.Z_FILTERED&&e.strategy!=Ea.Z_HUFFMAN_ONLY&&e.strategy!=Ea.Z_RLE&&e.strategy!=Ea.Z_FIXED&&e.strategy!=Ea.Z_DEFAULT_STRATEGY)throw new Error("Invalid strategy: "+e.strategy);if(e.dictionary&&!Le.isBuffer(e.dictionary))throw new Error("Invalid dictionary: it should be a Buffer instance");this._binding=new Ea.Zlib(t);var r=this;this._hadError=!1,this._binding.onerror=function(e,t){r._binding=null,r._hadError=!0;var n=new Error(e);n.errno=t,n.code=Ea.codes[t],r.emit("error",n)};var n=Ea.Z_DEFAULT_COMPRESSION;"number"==typeof e.level&&(n=e.level);var i=Ea.Z_DEFAULT_STRATEGY;"number"==typeof e.strategy&&(i=e.strategy),this._binding.init(e.windowBits||Ea.Z_DEFAULT_WINDOWBITS,n,e.memLevel||Ea.Z_DEFAULT_MEMLEVEL,i,e.dictionary),this._buffer=new Le(this._chunkSize),this._offset=0,this._closed=!1,this._level=n,this._strategy=i,this.once("end",this.close)}Object.keys(xa).forEach((function(e){xa[xa[e]]=e})),At(ja,nn),ja.prototype.params=function(e,t,r){if(e<Ea.Z_MIN_LEVEL||e>Ea.Z_MAX_LEVEL)throw new RangeError("Invalid compression level: "+e);if(t!=Ea.Z_FILTERED&&t!=Ea.Z_HUFFMAN_ONLY&&t!=Ea.Z_RLE&&t!=Ea.Z_FIXED&&t!=Ea.Z_DEFAULT_STRATEGY)throw new TypeError("Invalid strategy: "+t);if(this._level!==e||this._strategy!==t){var n=this;this.flush(Ea.Z_SYNC_FLUSH,(function(){n._binding.params(e,t),n._hadError||(n._level=e,n._strategy=t,r&&r())}))}else se.nextTick(r)},ja.prototype.reset=function(){return this._binding.reset()},ja.prototype._flush=function(e){this._transform(new Le(0),"",e)},ja.prototype.flush=function(e,t){var r=this._writableState;if(("function"==typeof e||void 0===e&&!t)&&(t=e,e=Ea.Z_FULL_FLUSH),r.ended)t&&se.nextTick(t);else if(r.ending)t&&this.once("end",t);else if(r.needDrain){var n=this;this.once("drain",(function(){n.flush(t)}))}else this._flushFlag=e,this.write(new Le(0),"",t)},ja.prototype.close=function(e){if(e&&se.nextTick(e),!this._closed){this._closed=!0,this._binding.close();var t=this;se.nextTick((function(){t.emit("close")}))}},ja.prototype._transform=function(e,t,r){var n,i=this._writableState,o=(i.ending||i.ended)&&(!e||i.length===e.length);if(null===!e&&!Le.isBuffer(e))return r(new Error("invalid input"));o?n=Ea.Z_FINISH:(n=this._flushFlag,e.length>=i.length&&(this._flushFlag=this._opts.flush||Ea.Z_NO_FLUSH)),this._processChunk(e,n,r)},ja.prototype._processChunk=function(e,t,r){var n=e&&e.length,i=this._chunkSize-this._offset,o=0,a=this,s="function"==typeof r;if(!s){var u,c=[],h=0;this.on("error",(function(e){u=e}));do{var f=this._binding.writeSync(t,e,o,n,this._buffer,this._offset,i)}while(!this._hadError&&p(f[0],f[1]));if(this._hadError)throw u;var l=Le.concat(c,h);return this.close(),l}var d=this._binding.write(t,e,o,n,this._buffer,this._offset,i);function p(u,f){if(!a._hadError){var l=i-f;if(function(e,t){if(!e)throw new Error("have should not go down")}(l>=0),l>0){var d=a._buffer.slice(a._offset,a._offset+l);a._offset+=l,s?a.push(d):(c.push(d),h+=d.length)}if((0===f||a._offset>=a._chunkSize)&&(i=a._chunkSize,a._offset=0,a._buffer=new Le(a._chunkSize)),0===f){if(o+=n-u,n=u,!s)return!0;var g=a._binding.write(t,e,o,n,a._buffer,a._offset,a._chunkSize);return g.callback=p,void(g.buffer=e)}if(!s)return!1;r()}}d.buffer=e,d.callback=p},At(Ra,ja),At(Aa,ja),At(Oa,ja),At(Sa,ja),At(La,ja),At(Ta,ja),At(Ca,ja);var Pa,Ua=function(e){return new Ca(e)},Ma="axios",za="0.20.0",Ba="Promise based HTTP client for the browser and node.js",Na="index.js",Da={test:"grunt test && bundlesize",start:"node ./sandbox/server.js",build:"NODE_ENV=production grunt build",preversion:"npm test",version:"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",postversion:"git push && git push --tags",examples:"node ./examples/server.js",coveralls:"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",fix:"eslint --fix lib/**/*.js"},Ia={type:"git",url:"https://github.com/axios/axios.git"},qa=["xhr","http","ajax","promise","node"],Fa="Matt Zabriskie",Za={url:"https://github.com/axios/axios/issues"},Ha="https://github.com/axios/axios",Ya={bundlesize:"^0.17.0",coveralls:"^3.0.0","es6-promise":"^4.2.4",grunt:"^1.0.2","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^20.1.0","grunt-karma":"^2.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1",karma:"^1.3.0","karma-chrome-launcher":"^2.2.0","karma-coverage":"^1.1.1","karma-firefox-launcher":"^1.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.2.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2",minimist:"^1.2.0",mocha:"^5.2.0",sinon:"^4.5.0",typescript:"^2.8.1","url-search-params":"^0.10.0",webpack:"^1.13.1","webpack-dev-server":"^1.14.1"},Wa={"./lib/adapters/http.js":"./lib/adapters/xhr.js"},Ga="dist/axios.min.js",Va="dist/axios.min.js",Xa="./index.d.ts",Ka={"follow-redirects":"^1.10.0"},$a=[{path:"./dist/axios.min.js",threshold:"5kB"}],Ja={name:Ma,version:za,description:Ba,main:Na,scripts:Da,repository:Ia,keywords:qa,author:Fa,license:"MIT",bugs:Za,homepage:Ha,devDependencies:Ya,browser:Wa,jsdelivr:Ga,unpkg:Va,typings:Xa,dependencies:Ka,bundlesize:$a},Qa=(Pa=Object.freeze({__proto__:null,name:Ma,version:za,description:Ba,main:Na,scripts:Da,repository:Ia,keywords:qa,author:Fa,license:"MIT",bugs:Za,homepage:Ha,devDependencies:Ya,browser:Wa,jsdelivr:Ga,unpkg:Va,typings:Xa,dependencies:Ka,bundlesize:$a,default:Ja}))&&Pa.default||Pa,es=Hi.http,ts=Hi.https,rs=/https:?/,ns={"Content-Type":"application/x-www-form-urlencoded"};function is(e,t){!L.isUndefined(e)&&L.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var os,as={adapter:("undefined"!=typeof XMLHttpRequest?os=function(e){return new Promise((function(t,r){var n=e.data,i=e.headers;L.isFormData(n)&&delete i["Content-Type"],(L.isBlob(n)||L.isFile(n))&&n.type&&delete i["Content-Type"];var o=new XMLHttpRequest;if(e.auth){var a=e.auth.username||"",s=unescape(encodeURIComponent(e.auth.password))||"";i.Authorization="Basic "+btoa(a+":"+s)}var u=de(e.baseURL,e.url);if(o.open(e.method.toUpperCase(),C(u,e.params,e.paramsSerializer),!0),o.timeout=e.timeout,o.onreadystatechange=function(){if(o&&4===o.readyState&&(0!==o.status||o.responseURL&&0===o.responseURL.indexOf("file:"))){var n,i,a,s,u,c="getAllResponseHeaders"in o?(n=o.getAllResponseHeaders(),u={},n?(L.forEach(n.split("\n"),(function(e){if(s=e.indexOf(":"),i=L.trim(e.substr(0,s)).toLowerCase(),a=L.trim(e.substr(s+1)),i){if(u[i]&&pe.indexOf(i)>=0)return;u[i]="set-cookie"===i?(u[i]?u[i]:[]).concat([a]):u[i]?u[i]+", "+a:a}})),u):u):null,h={data:e.responseType&&"text"!==e.responseType?o.response:o.responseText,status:o.status,statusText:o.statusText,headers:c,config:e,request:o};fe(t,r,h),o=null}},o.onabort=function(){o&&(r(he("Request aborted",e,"ECONNABORTED",o)),o=null)},o.onerror=function(){r(he("Network Error",e,null,o)),o=null},o.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(he(t,e,"ECONNABORTED",o)),o=null},L.isStandardBrowserEnv()){var c=(e.withCredentials||ge(u))&&e.xsrfCookieName?le.read(e.xsrfCookieName):void 0;c&&(i[e.xsrfHeaderName]=c)}if("setRequestHeader"in o&&L.forEach(i,(function(e,t){void 0===n&&"content-type"===t.toLowerCase()?delete i[t]:o.setRequestHeader(t,e)})),L.isUndefined(e.withCredentials)||(o.withCredentials=!!e.withCredentials),e.responseType)try{o.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&o.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&o.upload&&o.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){o&&(o.abort(),r(e),o=null)})),n||(n=null),o.send(n)}))}:void 0!==se&&"[object process]"===Object.prototype.toString.call(se)&&(os=function(e){return new Promise((function(t,r){var n=function(e){t(e)},i=function(e){r(e)},o=e.data,a=e.headers;if(a["User-Agent"]||a["user-agent"]||(a["User-Agent"]="axios/"+Qa.version),o&&!L.isStream(o)){if(Le.isBuffer(o));else if(L.isArrayBuffer(o))o=Le.from(new Uint8Array(o));else{if(!L.isString(o))return i(he("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",e));o=Le.from(o,"utf-8")}a["Content-Length"]=o.length}var s=void 0;e.auth&&(s=(e.auth.username||"")+":"+(e.auth.password||""));var u=de(e.baseURL,e.url),c=On.parse(u),h=c.protocol||"http:";if(!s&&c.auth){var f=c.auth.split(":");s=(f[0]||"")+":"+(f[1]||"")}s&&delete a.Authorization;var l=rs.test(h),d=l?e.httpsAgent:e.httpAgent,p={path:C(c.path,e.params,e.paramsSerializer).replace(/^\?/,""),method:e.method.toUpperCase(),headers:a,agent:d,agents:{http:e.httpAgent,https:e.httpsAgent},auth:s};e.socketPath?p.socketPath=e.socketPath:(p.hostname=c.hostname,p.port=c.port);var g,m=e.proxy;if(!m&&!1!==m){var v=h.slice(0,-1)+"_proxy",_=se.env[v]||se.env[v.toUpperCase()];if(_){var w=On.parse(_),y=se.env.no_proxy||se.env.NO_PROXY,b=!0;if(y&&(b=!y.split(",").map((function(e){return e.trim()})).some((function(e){return!!e&&("*"===e||"."===e[0]&&c.hostname.substr(c.hostname.length-e.length)===e||c.hostname===e)}))),b&&(m={host:w.hostname,port:w.port},w.auth)){var k=w.auth.split(":");m.auth={username:k[0],password:k[1]}}}}if(m&&(p.hostname=m.host,p.host=m.host,p.headers.host=c.hostname+(c.port?":"+c.port:""),p.port=m.port,p.path=h+"//"+c.hostname+(c.port?":"+c.port:"")+p.path,m.auth)){var E=Le.from(m.auth.username+":"+m.auth.password,"utf8").toString("base64");p.headers["Proxy-Authorization"]="Basic "+E}var x=l&&(!m||rs.test(m.protocol));e.transport?g=e.transport:0===e.maxRedirects?g=Gn:(e.maxRedirects&&(p.maxRedirects=e.maxRedirects),g=x?ts:es),e.maxBodyLength>-1&&(p.maxBodyLength=e.maxBodyLength);var R=g.request(p,(function(t){if(!R.aborted){var r=t,o=t.req||R;if(204!==t.statusCode&&"HEAD"!==o.method&&!1!==e.decompress)switch(t.headers["content-encoding"]){case"gzip":case"compress":case"deflate":r=r.pipe(Ua()),delete t.headers["content-encoding"]}var a={status:t.statusCode,statusText:t.statusMessage,headers:t.headers,config:e,request:o};if("stream"===e.responseType)a.data=r,fe(n,i,a);else{var s=[];r.on("data",(function(t){s.push(t),e.maxContentLength>-1&&Le.concat(s).length>e.maxContentLength&&(r.destroy(),i(he("maxContentLength size of "+e.maxContentLength+" exceeded",e,null,o)))})),r.on("error",(function(t){R.aborted||i(ce(t,e,null,o))})),r.on("end",(function(){var t=Le.concat(s);"arraybuffer"!==e.responseType&&(t=t.toString(e.responseEncoding),e.responseEncoding&&"utf8"!==e.responseEncoding||(t=L.stripBOM(t))),a.data=t,fe(n,i,a)}))}}}));R.on("error",(function(t){R.aborted&&"ERR_FR_TOO_MANY_REDIRECTS"!==t.code||i(ce(t,e,null,R))})),e.timeout&&R.setTimeout(e.timeout,(function(){R.abort(),i(he("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",R))})),e.cancelToken&&e.cancelToken.promise.then((function(e){R.aborted||(R.abort(),i(e))})),L.isStream(o)?o.on("error",(function(t){i(ce(t,e,null,R))})).pipe(R):R.end(o)}))}),os),transformRequest:[function(e,t){return ue(t,"Accept"),ue(t,"Content-Type"),L.isFormData(e)||L.isArrayBuffer(e)||L.isBuffer(e)||L.isStream(e)||L.isFile(e)||L.isBlob(e)?e:L.isArrayBufferView(e)?e.buffer:L.isURLSearchParams(e)?(is(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):L.isObject(e)?(is(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};L.forEach(["delete","get","head"],(function(e){as.headers[e]={}})),L.forEach(["post","put","patch"],(function(e){as.headers[e]=L.merge(ns)}));var ss=as;function us(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var cs=function(e){return us(e),e.headers=e.headers||{},e.data=U(e.data,e.headers,e.transformRequest),e.headers=L.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),L.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||ss.adapter)(e).then((function(t){return us(e),t.data=U(t.data,t.headers,e.transformResponse),t}),(function(t){return M(t)||(us(e),t&&t.response&&(t.response.data=U(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))},hs=function(e,t){t=t||{};var r={},n=["url","method","data"],i=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function s(e,t){return L.isPlainObject(e)&&L.isPlainObject(t)?L.merge(e,t):L.isPlainObject(t)?L.merge({},t):L.isArray(t)?t.slice():t}function u(n){L.isUndefined(t[n])?L.isUndefined(e[n])||(r[n]=s(void 0,e[n])):r[n]=s(e[n],t[n])}L.forEach(n,(function(e){L.isUndefined(t[e])||(r[e]=s(void 0,t[e]))})),L.forEach(i,u),L.forEach(o,(function(n){L.isUndefined(t[n])?L.isUndefined(e[n])||(r[n]=s(void 0,e[n])):r[n]=s(void 0,t[n])})),L.forEach(a,(function(n){n in t?r[n]=s(e[n],t[n]):n in e&&(r[n]=s(void 0,e[n]))}));var c=n.concat(i).concat(o).concat(a),h=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return L.forEach(h,u),r};function fs(e){this.defaults=e,this.interceptors={request:new P,response:new P}}fs.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=hs(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[cs,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},fs.prototype.getUri=function(e){return e=hs(this.defaults,e),C(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},L.forEach(["delete","get","head","options"],(function(e){fs.prototype[e]=function(t,r){return this.request(hs(r||{},{method:e,url:t}))}})),L.forEach(["post","put","patch"],(function(e){fs.prototype[e]=function(t,r,n){return this.request(hs(n||{},{method:e,url:t,data:r}))}}));var ls=fs;function ds(e){this.message=e}ds.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},ds.prototype.__CANCEL__=!0;var ps=ds;function gs(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new ps(e),t(r.reason))}))}gs.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},gs.source=function(){var e;return{token:new gs((function(t){e=t})),cancel:e}};var ms=gs;function vs(e){var t=new ls(e),r=b(ls.prototype.request,t);return L.extend(r,ls.prototype,t),L.extend(r,t),r}var _s=vs(ss);_s.Axios=ls,_s.create=function(e){return vs(hs(_s.defaults,e))},_s.Cancel=ps,_s.CancelToken=ms,_s.isCancel=M,_s.all=function(e){return Promise.all(e)},_s.spread=function(e){return function(t){return e.apply(null,t)}};var ws=_s,ys=_s;ws.default=ys;var bs=ws,ks=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Request=void 0;var n=r(a),i=r(u),o=r(bs),s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o.default;(0,n.default)(this,e),this.request=t}return(0,i.default)(e,[{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request.get(e,t)}},{key:"post",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request.post(e,t,r)}},{key:"put",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request.put(e,t,r)}},{key:"patch",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request.patch(e,t,r)}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.request.delete(e,t)}}],[{key:"isRequestError",value:function(e){return!(!e.response||!e.response.status)}}]),e}();t.Request=s}));e(ks),ks.Request;var Es=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(a),i=r(c),o=y(ks);t.default=function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";(0,n.default)(this,e),(0,i.default)(this,"token",void 0),(0,i.default)(this,"url",void 0),(0,i.default)(this,"request",void 0),this.token=t,this.url=r,this.request=new o.Request}}));e(Es);var xs=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={App:{baseUrl:"http://localhost:3333/api"},Meeting:{domain:"conf.v4h.cloud",externalApi:"https://conf.v4h.cloud/external_api.js"}}}));e(xs);var Rs=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n),a=r(o),s=r(xs);t.default=function(){return new Promise(function(){var e=(0,a.default)(i.default.mark((function e(t){var r,n;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:window.JitsiMeetExternalAPI?t(window.JitsiMeetExternalAPI):(r=document.getElementsByTagName("head")[0],(n=document.createElement("script")).setAttribute("type","text/javascript"),n.setAttribute("src",s.default.Meeting.externalApi),r.addEventListener("load",(function(e){"SCRIPT"===e.target.nodeName&&t(window.JitsiMeetExternalAPI)}),!0),r.appendChild(n));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())}}));e(Rs);var As=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n),s=r(o),h=r(a),f=r(u),l=r(c),d=r(Rs),p=r(xs);function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function m(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){(0,l.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var v=function(){function e(){(0,h.default)(this,e),(0,l.default)(this,"JitsiExternalApi",void 0),(0,l.default)(this,"options",void 0)}var t,r,n;return(0,f.default)(e,[{key:"startConference",value:(n=(0,s.default)(i.default.mark((function e(t){var r,n=this;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=m({width:640,height:480},t),this.options=r,(0,d.default)().then((function(e){n.JitsiExternalApi=new e(p.default.Meeting.domain,r),n.JitsiExternalApi.addEventListener("readyToClose",t.onClose)}));case 3:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"closeConference",value:(r=(0,s.default)(i.default.mark((function e(){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.options.parentNode.innerHTML="";case 1:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"getNumberOfPart",value:(t=(0,s.default)(i.default.mark((function e(){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.JitsiExternalApi.getNumberOfParticipants());case 1:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})}]),e}();t.default=v}));e(As);var Os=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n),s=r(o),f=r(a),d=r(u),m=r(h),v=r(l),_=r(p),y=r(g),b=r(c),k=r(w),E=r(Es),x=r(As);function R(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function A(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?R(Object(r),!0).forEach((function(t){(0,b.default)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):R(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function O(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,y.default)(e);if(t){var i=(0,y.default)(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return(0,_.default)(this,r)}}var S=function(e){(0,v.default)(_,e);var t,r,n,o,a,u,c,h,l,p,g=O(_);function _(e,t){var r;return(0,f.default)(this,_),r=g.call(this,e,t),(0,b.default)((0,m.default)(r),"conference",void 0),r.url="".concat(r.url,"/sessions"),r}return(0,d.default)(_,[{key:"get",value:(p=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.get("".concat(this.url,"/").concat(t),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw console.log(e),new k.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return p.apply(this,arguments)})},{key:"getAll",value:(l=(0,s.default)(i.default.mark((function e(){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.get("".concat(this.url),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw new k.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(){return l.apply(this,arguments)})},{key:"getSessions",value:(h=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.get("".concat(this.url,"/").concat(t,"/sessions"),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw new k.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return h.apply(this,arguments)})},{key:"create",value:(c=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.post("".concat(this.url),t,{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw new k.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return c.apply(this,arguments)})},{key:"update",value:(u=(0,s.default)(i.default.mark((function e(t,r){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.put("".concat(this.url,"/").concat(t),r,{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return 204===e.status})).catch((function(e){throw new k.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return u.apply(this,arguments)})},{key:"delete",value:(a=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.delete("".concat(this.url,"/").concat(t),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return 204===e.status})).catch((function(e){throw new k.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"startConference",value:(o=(0,s.default)(i.default.mark((function e(t,r){var n,o=this;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.request.post("".concat(this.url,"/").concat(t,"/join"),null,{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw new k.default(e.response.data,e.response.status)}));case 2:return n=e.sent,this.conference=new x.default,e.next=6,this.conference.startConference(A({jwt:n.sessionToken,roomName:n.short,onClose:function(){var e=(0,s.default)(i.default.mark((function e(){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.endConference(t,r.onClose);case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()},r));case 6:case"end":return e.stop()}}),e,this)}))),function(e,t){return o.apply(this,arguments)})},{key:"endConference",value:(n=(0,s.default)(i.default.mark((function e(t,r){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.leftConference(t,r);case 2:r&&r(),this.conference.closeConference();case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})},{key:"leftConference",value:(r=(0,s.default)(i.default.mark((function e(t,r){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.request.post("".concat(this.url,"/").concat(t,"/left"),{partId:r},{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return 204===e.status})).catch((function(e){throw new k.default(e.response.data,e.response.status)}));case 2:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"closeConference",value:(t=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.request.post("".concat(this.url,"/").concat(t,"/close"),null,{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return 204===e.status})).catch((function(e){throw new k.default(e.response.data,e.response.status)}));case 2:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),_}(E.default);t.default=S}));e(Os);var Ss=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n),s=r(o),c=r(a),h=r(u),f=r(l),d=r(p),m=r(g),v=r(w);function _(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=(0,m.default)(e);if(t){var i=(0,m.default)(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return(0,d.default)(this,r)}}var y=function(e){(0,f.default)(d,e);var t,r,n,o,a,u,l=_(d);function d(e,t){var r;return(0,c.default)(this,d),(r=l.call(this,e,t)).url="".concat(r.url,"/orgs"),r}return(0,h.default)(d,[{key:"get",value:(u=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.get("".concat(this.url,"/").concat(t),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw console.log(e),new v.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return u.apply(this,arguments)})},{key:"getAll",value:(a=(0,s.default)(i.default.mark((function e(){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.get("".concat(this.url),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw new v.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"getSessions",value:(o=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.get("".concat(this.url,"/").concat(t,"/sessions"),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw new v.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:"create",value:(n=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.post("".concat(this.url),t,{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return e.data})).catch((function(e){throw new v.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"update",value:(r=(0,s.default)(i.default.mark((function e(t,r){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.put("".concat(this.url,"/").concat(t),r,{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return 204===e.status})).catch((function(e){throw new v.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return r.apply(this,arguments)})},{key:"delete",value:(t=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.delete("".concat(this.url,"/").concat(t),{headers:{Authorization:this.token?"Bearer ".concat(this.token):""}}).then((function(e){return 204===e.status})).catch((function(e){throw new v.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),d}(r(Es).default);t.default=y}));e(Ss);var Ls=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n),s=r(o),h=r(a),f=r(u),l=r(c),d=y(ks),p=r(w),g=function(){function e(t){(0,h.default)(this,e),(0,l.default)(this,"url",void 0),(0,l.default)(this,"request",void 0),this.url=t,this.request=new d.Request}var t,r;return(0,f.default)(e,[{key:"login",value:(r=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.post("".concat(this.url,"/auth"),t).then((function(e){return e.data})).catch((function(e){throw console.log(e),new p.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"refresh",value:(t=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request.post("".concat(this.url,"/auth/refresh"),t).then((function(e){return e.data})).catch((function(e){throw new p.default(e.response.data,e.response.status)})));case 1:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})}]),e}();t.default=g}));e(Ls);var Ts=t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n),s=r(o),h=r(a),f=r(u),l=r(c),d=r(Os),p=r(Ss),g=r(Ls),m=r(xs),v=function(){function e(){(0,h.default)(this,e),(0,l.default)(this,"token",void 0),(0,l.default)(this,"baseUrl",void 0),(0,l.default)(this,"org",void 0),(0,l.default)(this,"session",void 0)}var t,r;return(0,f.default)(e,[{key:"setup",value:(r=(0,s.default)(i.default.mark((function e(t){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.baseUrl=t&&t.baseUrl?t.baseUrl:m.default.App.baseUrl,!(t&&t.login&&t.password)){e.next=4;break}return e.next=4,this.login(t.login,t.password);case 4:this.org=new p.default(this.token,this.baseUrl),this.session=new d.default(this.token,this.baseUrl);case 6:case"end":return e.stop()}}),e,this)}))),function(e){return r.apply(this,arguments)})},{key:"login",value:(t=(0,s.default)(i.default.mark((function e(t,r){var n,o;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new g.default(this.baseUrl),e.next=3,n.login({login:t,password:r});case 3:o=e.sent,this.token=o.accessToken;case 5:case"end":return e.stop()}}),e,this)}))),function(e,r){return t.apply(this,arguments)})}]),e}();t.default=v}));return e(Ts),e(t((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(Ts).default;t.default=n})))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
